//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `1_nguynhukontum.gpx`.
    static let _nguynhukontumGpx = Rswift.FileResource(bundle: R.hostingBundle, name: "1_nguynhukontum", pathExtension: "gpx")
    /// Resource file `LICENSE`.
    static let licensE = Rswift.FileResource(bundle: R.hostingBundle, name: "LICENSE", pathExtension: "")
    /// Resource file `lottie_trail_loading.json`.
    static let lottie_trail_loadingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "lottie_trail_loading", pathExtension: "json")
    
    /// `bundle.url(forResource: "1_nguynhukontum", withExtension: "gpx")`
    static func _nguynhukontumGpx(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file._nguynhukontumGpx
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "LICENSE", withExtension: "")`
    static func licensE(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.licensE
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "lottie_trail_loading", withExtension: "json")`
    static func lottie_trail_loadingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lottie_trail_loadingJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFProDisplay-BoldItalic`.
    static let sfProDisplayBoldItalic = Rswift.FontResource(fontName: "SFProDisplay-BoldItalic")
    /// Font `SFProDisplay-Bold`.
    static let sfProDisplayBold = Rswift.FontResource(fontName: "SFProDisplay-Bold")
    /// Font `SFProText-Bold`.
    static let sfProTextBold = Rswift.FontResource(fontName: "SFProText-Bold")
    /// Font `SFProText-Light`.
    static let sfProTextLight = Rswift.FontResource(fontName: "SFProText-Light")
    /// Font `SFProText-Medium`.
    static let sfProTextMedium = Rswift.FontResource(fontName: "SFProText-Medium")
    /// Font `SFProText-RegularItalic`.
    static let sfProTextRegularItalic = Rswift.FontResource(fontName: "SFProText-RegularItalic")
    /// Font `SFProText-Regular`.
    static let sfProTextRegular = Rswift.FontResource(fontName: "SFProText-Regular")
    /// Font `SFProText-Semibold`.
    static let sfProTextSemibold = Rswift.FontResource(fontName: "SFProText-Semibold")
    
    /// `UIFont(name: "SFProDisplay-Bold", size: ...)`
    static func sfProDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBold, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-BoldItalic", size: ...)`
    static func sfProDisplayBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBoldItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Bold", size: ...)`
    static func sfProTextBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextBold, size: size)
    }
    
    /// `UIFont(name: "SFProText-Light", size: ...)`
    static func sfProTextLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextLight, size: size)
    }
    
    /// `UIFont(name: "SFProText-Medium", size: ...)`
    static func sfProTextMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextMedium, size: size)
    }
    
    /// `UIFont(name: "SFProText-Regular", size: ...)`
    static func sfProTextRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextRegular, size: size)
    }
    
    /// `UIFont(name: "SFProText-RegularItalic", size: ...)`
    static func sfProTextRegularItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextRegularItalic, size: size)
    }
    
    /// `UIFont(name: "SFProText-Semibold", size: ...)`
    static func sfProTextSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextSemibold, size: size)
    }
    
    static func validate() throws {
      if R.font.sfProDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Bold' could not be loaded, is 'SF-Pro-Display-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-BoldItalic' could not be loaded, is 'SF-Pro-Display-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Bold' could not be loaded, is 'SF-Pro-Text-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Light' could not be loaded, is 'SF-Pro-Text-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Medium' could not be loaded, is 'SF-Pro-Text-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Regular' could not be loaded, is 'SF-Pro-Text-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextRegularItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-RegularItalic' could not be loaded, is 'SF-Pro-Text-RegularItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Semibold' could not be loaded, is 'SF-Pro-Text-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 213 images.
  struct image {
    /// Image `bg_default_card`.
    static let bg_default_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_default_card")
    /// Image `bgr_Credit_Card_blank`.
    static let bgr_Credit_Card_blank = Rswift.ImageResource(bundle: R.hostingBundle, name: "bgr_Credit_Card_blank")
    /// Image `collapseClose`.
    static let collapseClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "collapseClose")
    /// Image `collapseOpen`.
    static let collapseOpen = Rswift.ImageResource(bundle: R.hostingBundle, name: "collapseOpen")
    /// Image `connect_wire`.
    static let connect_wire = Rswift.ImageResource(bundle: R.hostingBundle, name: "connect_wire")
    /// Image `contacts`.
    static let contacts = Rswift.ImageResource(bundle: R.hostingBundle, name: "contacts")
    /// Image `cover_nav_background`.
    static let cover_nav_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "cover_nav_background")
    /// Image `credit_cover_bottom_header_bg`.
    static let credit_cover_bottom_header_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "credit_cover_bottom_header_bg")
    /// Image `credit_cover_header_bg`.
    static let credit_cover_header_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "credit_cover_header_bg")
    /// Image `default_avatar`.
    static let default_avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "default_avatar")
    /// Image `down-arrow`.
    static let downArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "down-arrow")
    /// Image `ic_accdetail_arrow_top`.
    static let ic_accdetail_arrow_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_accdetail_arrow_top")
    /// Image `ic_accdetail_close`.
    static let ic_accdetail_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_accdetail_close")
    /// Image `ic_accessory_arrow_bottom`.
    static let ic_accessory_arrow_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_accessory_arrow_bottom")
    /// Image `ic_accessory_arrow_down`.
    static let ic_accessory_arrow_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_accessory_arrow_down")
    /// Image `ic_accessory_arrow_right`.
    static let ic_accessory_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_accessory_arrow_right")
    /// Image `ic_accessory_arrow_top`.
    static let ic_accessory_arrow_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_accessory_arrow_top")
    /// Image `ic_accountInfo_add`.
    static let ic_accountInfo_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_accountInfo_add")
    /// Image `ic_accountInfo_bottom`.
    static let ic_accountInfo_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_accountInfo_bottom")
    /// Image `ic_accountInfo_right`.
    static let ic_accountInfo_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_accountInfo_right")
    /// Image `ic_accountInfo_search_cancel`.
    static let ic_accountInfo_search_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_accountInfo_search_cancel")
    /// Image `ic_accountInfo_search`.
    static let ic_accountInfo_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_accountInfo_search")
    /// Image `ic_action_card_payment`.
    static let ic_action_card_payment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_card_payment")
    /// Image `ic_action_card_statement`.
    static let ic_action_card_statement = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_card_statement")
    /// Image `ic_action_charge`.
    static let ic_action_charge = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_charge")
    /// Image `ic_action_delete`.
    static let ic_action_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_delete")
    /// Image `ic_action_edit`.
    static let ic_action_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_edit")
    /// Image `ic_action_interbank_transfer`.
    static let ic_action_interbank_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_interbank_transfer")
    /// Image `ic_action_internal_transfer`.
    static let ic_action_internal_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_internal_transfer")
    /// Image `ic_action_transfer`.
    static let ic_action_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_action_transfer")
    /// Image `ic_active_card`.
    static let ic_active_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_active_card")
    /// Image `ic_add`.
    static let ic_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add")
    /// Image `ic_arrow_dropdown`.
    static let ic_arrow_dropdown = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_dropdown")
    /// Image `ic_arrow_left_black`.
    static let ic_arrow_left_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_left_black")
    /// Image `ic_bottomsheet_close`.
    static let ic_bottomsheet_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bottomsheet_close")
    /// Image `ic_branch_pin`.
    static let ic_branch_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_branch_pin")
    /// Image `ic_calendar`.
    static let ic_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calendar")
    /// Image `ic_call`.
    static let ic_call = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_call")
    /// Image `ic_cardService_autoDebtDeduction`.
    static let ic_cardService_autoDebtDeduction = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cardService_autoDebtDeduction")
    /// Image `ic_cardService_cardPayment`.
    static let ic_cardService_cardPayment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cardService_cardPayment")
    /// Image `ic_cardService_default`.
    static let ic_cardService_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cardService_default")
    /// Image `ic_cardService_onlinePayment`.
    static let ic_cardService_onlinePayment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cardService_onlinePayment")
    /// Image `ic_cardService_openLockActivateCard`.
    static let ic_cardService_openLockActivateCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cardService_openLockActivateCard")
    /// Image `ic_cardService_re-supplyPIN`.
    static let ic_cardService_reSupplyPIN = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cardService_re-supplyPIN")
    /// Image `ic_cardService_registrationCard`.
    static let ic_cardService_registrationCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cardService_registrationCard")
    /// Image `ic_charge_money_contacts`.
    static let ic_charge_money_contacts = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_charge_money_contacts")
    /// Image `ic_checked`.
    static let ic_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checked")
    /// Image `ic_chip`.
    static let ic_chip = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chip")
    /// Image `ic_close_adv_banner`.
    static let ic_close_adv_banner = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close_adv_banner")
    /// Image `ic_contact`.
    static let ic_contact = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_contact")
    /// Image `ic_credit`.
    static let ic_credit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_credit")
    /// Image `ic_customerSupport_atmBranch`.
    static let ic_customerSupport_atmBranch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_customerSupport_atmBranch")
    /// Image `ic_customerSupport_customerInfo`.
    static let ic_customerSupport_customerInfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_customerSupport_customerInfo")
    /// Image `ic_customerSupport_exchangeRate`.
    static let ic_customerSupport_exchangeRate = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_customerSupport_exchangeRate")
    /// Image `ic_customerSupport_feedbackErrorApplication`.
    static let ic_customerSupport_feedbackErrorApplication = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_customerSupport_feedbackErrorApplication")
    /// Image `ic_customerSupport_interestRate`.
    static let ic_customerSupport_interestRate = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_customerSupport_interestRate")
    /// Image `ic_customerSupport_requentlyQuestion`.
    static let ic_customerSupport_requentlyQuestion = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_customerSupport_requentlyQuestion")
    /// Image `ic_customerSupport_userGuid`.
    static let ic_customerSupport_userGuid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_customerSupport_userGuid")
    /// Image `ic_customer_code`.
    static let ic_customer_code = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_customer_code")
    /// Image `ic_default`.
    static let ic_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_default")
    /// Image `ic_delete`.
    static let ic_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete")
    /// Image `ic_dest_account`.
    static let ic_dest_account = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dest_account")
    /// Image `ic_disable_view`.
    static let ic_disable_view = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_disable_view")
    /// Image `ic_electric`.
    static let ic_electric = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_electric")
    /// Image `ic_exchange`.
    static let ic_exchange = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_exchange")
    /// Image `ic_faceid`.
    static let ic_faceid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_faceid")
    /// Image `ic_feature_247_transfer_disable`.
    static let ic_feature_247_transfer_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_247_transfer_disable")
    /// Image `ic_feature_247_transfer`.
    static let ic_feature_247_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_247_transfer")
    /// Image `ic_feature_buy_fligler_ticket`.
    static let ic_feature_buy_fligler_ticket = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_buy_fligler_ticket")
    /// Image `ic_feature_buy_movie_ticket`.
    static let ic_feature_buy_movie_ticket = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_buy_movie_ticket")
    /// Image `ic_feature_charity_transfer_disable`.
    static let ic_feature_charity_transfer_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_charity_transfer_disable")
    /// Image `ic_feature_charity_transfer`.
    static let ic_feature_charity_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_charity_transfer")
    /// Image `ic_feature_contact_disable`.
    static let ic_feature_contact_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_contact_disable")
    /// Image `ic_feature_contact`.
    static let ic_feature_contact = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_contact")
    /// Image `ic_feature_edit_function`.
    static let ic_feature_edit_function = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_edit_function")
    /// Image `ic_feature_extra_saving_disable`.
    static let ic_feature_extra_saving_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_extra_saving_disable")
    /// Image `ic_feature_extra_saving`.
    static let ic_feature_extra_saving = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_extra_saving")
    /// Image `ic_feature_favor_transfer`.
    static let ic_feature_favor_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_favor_transfer")
    /// Image `ic_feature_info_account`.
    static let ic_feature_info_account = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_info_account")
    /// Image `ic_feature_interbank_transfer_disable`.
    static let ic_feature_interbank_transfer_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_interbank_transfer_disable")
    /// Image `ic_feature_interbank_transfer`.
    static let ic_feature_interbank_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_interbank_transfer")
    /// Image `ic_feature_internal_transfer_disable`.
    static let ic_feature_internal_transfer_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_internal_transfer_disable")
    /// Image `ic_feature_internal_transfer`.
    static let ic_feature_internal_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_internal_transfer")
    /// Image `ic_feature_net_disable`.
    static let ic_feature_net_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_net_disable")
    /// Image `ic_feature_net`.
    static let ic_feature_net = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_net")
    /// Image `ic_feature_pay_the_bill_disable`.
    static let ic_feature_pay_the_bill_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_pay_the_bill_disable")
    /// Image `ic_feature_pay_the_bill`.
    static let ic_feature_pay_the_bill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_pay_the_bill")
    /// Image `ic_feature_pay_the_card_disable`.
    static let ic_feature_pay_the_card_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_pay_the_card_disable")
    /// Image `ic_feature_pay_the_card`.
    static let ic_feature_pay_the_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_pay_the_card")
    /// Image `ic_feature_qr_pay`.
    static let ic_feature_qr_pay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_qr_pay")
    /// Image `ic_feature_rechange_price_phone_disable`.
    static let ic_feature_rechange_price_phone_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_rechange_price_phone_disable")
    /// Image `ic_feature_rechange_price_phone`.
    static let ic_feature_rechange_price_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_rechange_price_phone")
    /// Image `ic_feature_saving_disable`.
    static let ic_feature_saving_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_saving_disable")
    /// Image `ic_feature_saving`.
    static let ic_feature_saving = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_saving")
    /// Image `ic_feature_search_transaction_disable`.
    static let ic_feature_search_transaction_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_search_transaction_disable")
    /// Image `ic_feature_search_transaction`.
    static let ic_feature_search_transaction = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_search_transaction")
    /// Image `ic_feature_settlement_saving_disable`.
    static let ic_feature_settlement_saving_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_settlement_saving_disable")
    /// Image `ic_feature_settlement_saving`.
    static let ic_feature_settlement_saving = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_settlement_saving")
    /// Image `ic_feature_support_disable`.
    static let ic_feature_support_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_support_disable")
    /// Image `ic_feature_support`.
    static let ic_feature_support = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_support")
    /// Image `ic_feature_transfer_price`.
    static let ic_feature_transfer_price = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feature_transfer_price")
    /// Image `ic_header_account`.
    static let ic_header_account = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_header_account")
    /// Image `ic_history`.
    static let ic_history = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_history")
    /// Image `ic_imageLibrary`.
    static let ic_imageLibrary = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_imageLibrary")
    /// Image `ic_info_account_credit`.
    static let ic_info_account_credit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_info_account_credit")
    /// Image `ic_info_account_debit`.
    static let ic_info_account_debit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_info_account_debit")
    /// Image `ic_info_account_pay`.
    static let ic_info_account_pay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_info_account_pay")
    /// Image `ic_info_account_saving`.
    static let ic_info_account_saving = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_info_account_saving")
    /// Image `ic_interbank`.
    static let ic_interbank = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_interbank")
    /// Image `ic_internalTransfer`.
    static let ic_internalTransfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_internalTransfer")
    /// Image `ic_internet`.
    static let ic_internet = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_internet")
    /// Image `ic_izi_account`.
    static let ic_izi_account = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_izi_account")
    /// Image `ic_listContact`.
    static let ic_listContact = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_listContact")
    /// Image `ic_loadIcon`.
    static let ic_loadIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_loadIcon")
    /// Image `ic_loan_service`.
    static let ic_loan_service = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_loan_service")
    /// Image `ic_login_focus`.
    static let ic_login_focus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_focus")
    /// Image `ic_login`.
    static let ic_login = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login")
    /// Image `ic_logo`.
    static let ic_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo")
    /// Image `ic_menu_account_info`.
    static let ic_menu_account_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_account_info")
    /// Image `ic_menu_card_service`.
    static let ic_menu_card_service = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_card_service")
    /// Image `ic_menu_credit`.
    static let ic_menu_credit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_credit")
    /// Image `ic_menu_logout`.
    static let ic_menu_logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_logout")
    /// Image `ic_menu_mailbox`.
    static let ic_menu_mailbox = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_mailbox")
    /// Image `ic_menu_other_service`.
    static let ic_menu_other_service = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_other_service")
    /// Image `ic_menu_pay_service`.
    static let ic_menu_pay_service = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_pay_service")
    /// Image `ic_menu_recharge`.
    static let ic_menu_recharge = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_recharge")
    /// Image `ic_menu_register_new_service`.
    static let ic_menu_register_new_service = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_register_new_service")
    /// Image `ic_menu_saving`.
    static let ic_menu_saving = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_saving")
    /// Image `ic_menu_setting`.
    static let ic_menu_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_setting")
    /// Image `ic_menu_transfer`.
    static let ic_menu_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_transfer")
    /// Image `ic_menu_user_support`.
    static let ic_menu_user_support = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_user_support")
    /// Image `ic_more`.
    static let ic_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more")
    /// Image `ic_nav_back`.
    static let ic_nav_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_nav_back")
    /// Image `ic_near`.
    static let ic_near = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_near")
    /// Image `ic_network`.
    static let ic_network = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_network")
    /// Image `ic_next`.
    static let ic_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_next")
    /// Image `ic_password`.
    static let ic_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_password")
    /// Image `ic_pay_electric`.
    static let ic_pay_electric = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pay_electric")
    /// Image `ic_pay_internet`.
    static let ic_pay_internet = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pay_internet")
    /// Image `ic_pay_phone`.
    static let ic_pay_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pay_phone")
    /// Image `ic_pay_postpaid_mobile`.
    static let ic_pay_postpaid_mobile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pay_postpaid_mobile")
    /// Image `ic_pay_tv`.
    static let ic_pay_tv = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pay_tv")
    /// Image `ic_pay_water`.
    static let ic_pay_water = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pay_water")
    /// Image `ic_phone`.
    static let ic_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_phone")
    /// Image `ic_popup_close`.
    static let ic_popup_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_popup_close")
    /// Image `ic_postpaid_mobile`.
    static let ic_postpaid_mobile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_postpaid_mobile")
    /// Image `ic_promotion`.
    static let ic_promotion = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_promotion")
    /// Image `ic_qr-code`.
    static let ic_qrCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_qr-code")
    /// Image `ic_radio_check`.
    static let ic_radio_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radio_check")
    /// Image `ic_radio_uncheck`.
    static let ic_radio_uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radio_uncheck")
    /// Image `ic_range_handle_image`.
    static let ic_range_handle_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_range_handle_image")
    /// Image `ic_registerNewService_1`.
    static let ic_registerNewService_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_registerNewService_1")
    /// Image `ic_registerNewService`.
    static let ic_registerNewService = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_registerNewService")
    /// Image `ic_register_credit_service`.
    static let ic_register_credit_service = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_register_credit_service")
    /// Image `ic_register_new_service`.
    static let ic_register_new_service = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_register_new_service")
    /// Image `ic_saving_Isaving`.
    static let ic_saving_Isaving = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_saving_Isaving")
    /// Image `ic_saving_addAmount`.
    static let ic_saving_addAmount = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_saving_addAmount")
    /// Image `ic_saving_pay`.
    static let ic_saving_pay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_saving_pay")
    /// Image `ic_saving_query`.
    static let ic_saving_query = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_saving_query")
    /// Image `ic_saving_saving`.
    static let ic_saving_saving = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_saving_saving")
    /// Image `ic_saving_settlment`.
    static let ic_saving_settlment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_saving_settlment")
    /// Image `ic_search`.
    static let ic_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search")
    /// Image `ic_setting_change_otp`.
    static let ic_setting_change_otp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_change_otp")
    /// Image `ic_setting_change_pass`.
    static let ic_setting_change_pass = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_change_pass")
    /// Image `ic_setting_login_faceid`.
    static let ic_setting_login_faceid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_login_faceid")
    /// Image `ic_setting_login_toucid`.
    static let ic_setting_login_toucid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_login_toucid")
    /// Image `ic_setting_resend_otp`.
    static let ic_setting_resend_otp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_resend_otp")
    /// Image `ic_setting_transaction_faceid`.
    static let ic_setting_transaction_faceid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_transaction_faceid")
    /// Image `ic_setting_transaction_toucid`.
    static let ic_setting_transaction_toucid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_transaction_toucid")
    /// Image `ic_sort`.
    static let ic_sort = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sort")
    /// Image `ic_supportUnit`.
    static let ic_supportUnit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_supportUnit")
    /// Image `ic_support_black`.
    static let ic_support_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_support_black")
    /// Image `ic_support`.
    static let ic_support = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_support")
    /// Image `ic_tabbar_home_selected`.
    static let ic_tabbar_home_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_home_selected")
    /// Image `ic_tabbar_home`.
    static let ic_tabbar_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_home")
    /// Image `ic_tabbar_menu_selected`.
    static let ic_tabbar_menu_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_menu_selected")
    /// Image `ic_tabbar_menu`.
    static let ic_tabbar_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_menu")
    /// Image `ic_tabbar_pay_selected`.
    static let ic_tabbar_pay_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_pay_selected")
    /// Image `ic_tabbar_pay`.
    static let ic_tabbar_pay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_pay")
    /// Image `ic_tabbar_saving_selected`.
    static let ic_tabbar_saving_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_saving_selected")
    /// Image `ic_tabbar_saving`.
    static let ic_tabbar_saving = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_saving")
    /// Image `ic_tabbar_transfer_selected`.
    static let ic_tabbar_transfer_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_transfer_selected")
    /// Image `ic_tabbar_transfer`.
    static let ic_tabbar_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_transfer")
    /// Image `ic_touchid`.
    static let ic_touchid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_touchid")
    /// Image `ic_transaction_statuc_fail`.
    static let ic_transaction_statuc_fail = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_transaction_statuc_fail")
    /// Image `ic_transaction_statuc_success`.
    static let ic_transaction_statuc_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_transaction_statuc_success")
    /// Image `ic_transaction_statuc_wait`.
    static let ic_transaction_statuc_wait = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_transaction_statuc_wait")
    /// Image `ic_transaction_success`.
    static let ic_transaction_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_transaction_success")
    /// Image `ic_tv`.
    static let ic_tv = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tv")
    /// Image `ic_uncheck`.
    static let ic_uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_uncheck")
    /// Image `ic_user`.
    static let ic_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user")
    /// Image `ic_view`.
    static let ic_view = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_view")
    /// Image `ic_visa`.
    static let ic_visa = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_visa")
    /// Image `ic_wallet_disable`.
    static let ic_wallet_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_wallet_disable")
    /// Image `ic_wallet`.
    static let ic_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_wallet")
    /// Image `ic_water`.
    static let ic_water = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_water")
    /// Image `img_scannerframe`.
    static let img_scannerframe = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_scannerframe")
    /// Image `lag_en`.
    static let lag_en = Rswift.ImageResource(bundle: R.hostingBundle, name: "lag_en")
    /// Image `lag_vn`.
    static let lag_vn = Rswift.ImageResource(bundle: R.hostingBundle, name: "lag_vn")
    /// Image `menu_header_bg`.
    static let menu_header_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_header_bg")
    /// Image `menu_icon_background`.
    static let menu_icon_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_icon_background")
    /// Image `new_saving_cell_left_view`.
    static let new_saving_cell_left_view = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_saving_cell_left_view")
    /// Image `notification_icon`.
    static let notification_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_icon")
    /// Image `price_selected_bg`.
    static let price_selected_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "price_selected_bg")
    /// Image `radio_checked`.
    static let radio_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio_checked")
    /// Image `radio_uncheck`.
    static let radio_uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio_uncheck")
    /// Image `save_beneficiary_btn`.
    static let save_beneficiary_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "save_beneficiary_btn")
    /// Image `splash_bg`.
    static let splash_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_bg")
    /// Image `switch_off`.
    static let switch_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "switch_off")
    /// Image `switch_on`.
    static let switch_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "switch_on")
    /// Image `transaction_info_bg`.
    static let transaction_info_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_info_bg")
    /// Image `unsave_beneficiary_btn`.
    static let unsave_beneficiary_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "unsave_beneficiary_btn")
    /// Image `up-arrow`.
    static let upArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "up-arrow")
    
    /// `UIImage(named: "bg_default_card", bundle: ..., traitCollection: ...)`
    static func bg_default_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_default_card, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bgr_Credit_Card_blank", bundle: ..., traitCollection: ...)`
    static func bgr_Credit_Card_blank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgr_Credit_Card_blank, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "collapseClose", bundle: ..., traitCollection: ...)`
    static func collapseClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.collapseClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "collapseOpen", bundle: ..., traitCollection: ...)`
    static func collapseOpen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.collapseOpen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "connect_wire", bundle: ..., traitCollection: ...)`
    static func connect_wire(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.connect_wire, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contacts", bundle: ..., traitCollection: ...)`
    static func contacts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contacts, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cover_nav_background", bundle: ..., traitCollection: ...)`
    static func cover_nav_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cover_nav_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "credit_cover_bottom_header_bg", bundle: ..., traitCollection: ...)`
    static func credit_cover_bottom_header_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.credit_cover_bottom_header_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "credit_cover_header_bg", bundle: ..., traitCollection: ...)`
    static func credit_cover_header_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.credit_cover_header_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default_avatar", bundle: ..., traitCollection: ...)`
    static func default_avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_avatar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "down-arrow", bundle: ..., traitCollection: ...)`
    static func downArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_accdetail_arrow_top", bundle: ..., traitCollection: ...)`
    static func ic_accdetail_arrow_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_accdetail_arrow_top, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_accdetail_close", bundle: ..., traitCollection: ...)`
    static func ic_accdetail_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_accdetail_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_accessory_arrow_bottom", bundle: ..., traitCollection: ...)`
    static func ic_accessory_arrow_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_accessory_arrow_bottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_accessory_arrow_down", bundle: ..., traitCollection: ...)`
    static func ic_accessory_arrow_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_accessory_arrow_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_accessory_arrow_right", bundle: ..., traitCollection: ...)`
    static func ic_accessory_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_accessory_arrow_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_accessory_arrow_top", bundle: ..., traitCollection: ...)`
    static func ic_accessory_arrow_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_accessory_arrow_top, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_accountInfo_add", bundle: ..., traitCollection: ...)`
    static func ic_accountInfo_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_accountInfo_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_accountInfo_bottom", bundle: ..., traitCollection: ...)`
    static func ic_accountInfo_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_accountInfo_bottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_accountInfo_right", bundle: ..., traitCollection: ...)`
    static func ic_accountInfo_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_accountInfo_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_accountInfo_search", bundle: ..., traitCollection: ...)`
    static func ic_accountInfo_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_accountInfo_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_accountInfo_search_cancel", bundle: ..., traitCollection: ...)`
    static func ic_accountInfo_search_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_accountInfo_search_cancel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_card_payment", bundle: ..., traitCollection: ...)`
    static func ic_action_card_payment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_card_payment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_card_statement", bundle: ..., traitCollection: ...)`
    static func ic_action_card_statement(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_card_statement, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_charge", bundle: ..., traitCollection: ...)`
    static func ic_action_charge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_charge, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_delete", bundle: ..., traitCollection: ...)`
    static func ic_action_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_edit", bundle: ..., traitCollection: ...)`
    static func ic_action_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_interbank_transfer", bundle: ..., traitCollection: ...)`
    static func ic_action_interbank_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_interbank_transfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_internal_transfer", bundle: ..., traitCollection: ...)`
    static func ic_action_internal_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_internal_transfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_action_transfer", bundle: ..., traitCollection: ...)`
    static func ic_action_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_action_transfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_active_card", bundle: ..., traitCollection: ...)`
    static func ic_active_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_active_card, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add", bundle: ..., traitCollection: ...)`
    static func ic_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_arrow_dropdown", bundle: ..., traitCollection: ...)`
    static func ic_arrow_dropdown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_dropdown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_arrow_left_black", bundle: ..., traitCollection: ...)`
    static func ic_arrow_left_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_left_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bottomsheet_close", bundle: ..., traitCollection: ...)`
    static func ic_bottomsheet_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bottomsheet_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_branch_pin", bundle: ..., traitCollection: ...)`
    static func ic_branch_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_branch_pin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_calendar", bundle: ..., traitCollection: ...)`
    static func ic_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_call", bundle: ..., traitCollection: ...)`
    static func ic_call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_call, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cardService_autoDebtDeduction", bundle: ..., traitCollection: ...)`
    static func ic_cardService_autoDebtDeduction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cardService_autoDebtDeduction, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cardService_cardPayment", bundle: ..., traitCollection: ...)`
    static func ic_cardService_cardPayment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cardService_cardPayment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cardService_default", bundle: ..., traitCollection: ...)`
    static func ic_cardService_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cardService_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cardService_onlinePayment", bundle: ..., traitCollection: ...)`
    static func ic_cardService_onlinePayment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cardService_onlinePayment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cardService_openLockActivateCard", bundle: ..., traitCollection: ...)`
    static func ic_cardService_openLockActivateCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cardService_openLockActivateCard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cardService_re-supplyPIN", bundle: ..., traitCollection: ...)`
    static func ic_cardService_reSupplyPIN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cardService_reSupplyPIN, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cardService_registrationCard", bundle: ..., traitCollection: ...)`
    static func ic_cardService_registrationCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cardService_registrationCard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_charge_money_contacts", bundle: ..., traitCollection: ...)`
    static func ic_charge_money_contacts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_charge_money_contacts, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_checked", bundle: ..., traitCollection: ...)`
    static func ic_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chip", bundle: ..., traitCollection: ...)`
    static func ic_chip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chip, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_close_adv_banner", bundle: ..., traitCollection: ...)`
    static func ic_close_adv_banner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close_adv_banner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_contact", bundle: ..., traitCollection: ...)`
    static func ic_contact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_contact, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_credit", bundle: ..., traitCollection: ...)`
    static func ic_credit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_credit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_customerSupport_atmBranch", bundle: ..., traitCollection: ...)`
    static func ic_customerSupport_atmBranch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_customerSupport_atmBranch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_customerSupport_customerInfo", bundle: ..., traitCollection: ...)`
    static func ic_customerSupport_customerInfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_customerSupport_customerInfo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_customerSupport_exchangeRate", bundle: ..., traitCollection: ...)`
    static func ic_customerSupport_exchangeRate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_customerSupport_exchangeRate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_customerSupport_feedbackErrorApplication", bundle: ..., traitCollection: ...)`
    static func ic_customerSupport_feedbackErrorApplication(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_customerSupport_feedbackErrorApplication, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_customerSupport_interestRate", bundle: ..., traitCollection: ...)`
    static func ic_customerSupport_interestRate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_customerSupport_interestRate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_customerSupport_requentlyQuestion", bundle: ..., traitCollection: ...)`
    static func ic_customerSupport_requentlyQuestion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_customerSupport_requentlyQuestion, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_customerSupport_userGuid", bundle: ..., traitCollection: ...)`
    static func ic_customerSupport_userGuid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_customerSupport_userGuid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_customer_code", bundle: ..., traitCollection: ...)`
    static func ic_customer_code(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_customer_code, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_default", bundle: ..., traitCollection: ...)`
    static func ic_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_delete", bundle: ..., traitCollection: ...)`
    static func ic_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_dest_account", bundle: ..., traitCollection: ...)`
    static func ic_dest_account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dest_account, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_disable_view", bundle: ..., traitCollection: ...)`
    static func ic_disable_view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_disable_view, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_electric", bundle: ..., traitCollection: ...)`
    static func ic_electric(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_electric, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_exchange", bundle: ..., traitCollection: ...)`
    static func ic_exchange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_exchange, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_faceid", bundle: ..., traitCollection: ...)`
    static func ic_faceid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_faceid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_247_transfer", bundle: ..., traitCollection: ...)`
    static func ic_feature_247_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_247_transfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_247_transfer_disable", bundle: ..., traitCollection: ...)`
    static func ic_feature_247_transfer_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_247_transfer_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_buy_fligler_ticket", bundle: ..., traitCollection: ...)`
    static func ic_feature_buy_fligler_ticket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_buy_fligler_ticket, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_buy_movie_ticket", bundle: ..., traitCollection: ...)`
    static func ic_feature_buy_movie_ticket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_buy_movie_ticket, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_charity_transfer", bundle: ..., traitCollection: ...)`
    static func ic_feature_charity_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_charity_transfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_charity_transfer_disable", bundle: ..., traitCollection: ...)`
    static func ic_feature_charity_transfer_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_charity_transfer_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_contact", bundle: ..., traitCollection: ...)`
    static func ic_feature_contact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_contact, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_contact_disable", bundle: ..., traitCollection: ...)`
    static func ic_feature_contact_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_contact_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_edit_function", bundle: ..., traitCollection: ...)`
    static func ic_feature_edit_function(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_edit_function, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_extra_saving", bundle: ..., traitCollection: ...)`
    static func ic_feature_extra_saving(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_extra_saving, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_extra_saving_disable", bundle: ..., traitCollection: ...)`
    static func ic_feature_extra_saving_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_extra_saving_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_favor_transfer", bundle: ..., traitCollection: ...)`
    static func ic_feature_favor_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_favor_transfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_info_account", bundle: ..., traitCollection: ...)`
    static func ic_feature_info_account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_info_account, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_interbank_transfer", bundle: ..., traitCollection: ...)`
    static func ic_feature_interbank_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_interbank_transfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_interbank_transfer_disable", bundle: ..., traitCollection: ...)`
    static func ic_feature_interbank_transfer_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_interbank_transfer_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_internal_transfer", bundle: ..., traitCollection: ...)`
    static func ic_feature_internal_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_internal_transfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_internal_transfer_disable", bundle: ..., traitCollection: ...)`
    static func ic_feature_internal_transfer_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_internal_transfer_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_net", bundle: ..., traitCollection: ...)`
    static func ic_feature_net(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_net, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_net_disable", bundle: ..., traitCollection: ...)`
    static func ic_feature_net_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_net_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_pay_the_bill", bundle: ..., traitCollection: ...)`
    static func ic_feature_pay_the_bill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_pay_the_bill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_pay_the_bill_disable", bundle: ..., traitCollection: ...)`
    static func ic_feature_pay_the_bill_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_pay_the_bill_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_pay_the_card", bundle: ..., traitCollection: ...)`
    static func ic_feature_pay_the_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_pay_the_card, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_pay_the_card_disable", bundle: ..., traitCollection: ...)`
    static func ic_feature_pay_the_card_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_pay_the_card_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_qr_pay", bundle: ..., traitCollection: ...)`
    static func ic_feature_qr_pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_qr_pay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_rechange_price_phone", bundle: ..., traitCollection: ...)`
    static func ic_feature_rechange_price_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_rechange_price_phone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_rechange_price_phone_disable", bundle: ..., traitCollection: ...)`
    static func ic_feature_rechange_price_phone_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_rechange_price_phone_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_saving", bundle: ..., traitCollection: ...)`
    static func ic_feature_saving(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_saving, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_saving_disable", bundle: ..., traitCollection: ...)`
    static func ic_feature_saving_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_saving_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_search_transaction", bundle: ..., traitCollection: ...)`
    static func ic_feature_search_transaction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_search_transaction, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_search_transaction_disable", bundle: ..., traitCollection: ...)`
    static func ic_feature_search_transaction_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_search_transaction_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_settlement_saving", bundle: ..., traitCollection: ...)`
    static func ic_feature_settlement_saving(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_settlement_saving, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_settlement_saving_disable", bundle: ..., traitCollection: ...)`
    static func ic_feature_settlement_saving_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_settlement_saving_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_support", bundle: ..., traitCollection: ...)`
    static func ic_feature_support(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_support, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_support_disable", bundle: ..., traitCollection: ...)`
    static func ic_feature_support_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_support_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feature_transfer_price", bundle: ..., traitCollection: ...)`
    static func ic_feature_transfer_price(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feature_transfer_price, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_header_account", bundle: ..., traitCollection: ...)`
    static func ic_header_account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_header_account, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_history", bundle: ..., traitCollection: ...)`
    static func ic_history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_history, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_imageLibrary", bundle: ..., traitCollection: ...)`
    static func ic_imageLibrary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_imageLibrary, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_info_account_credit", bundle: ..., traitCollection: ...)`
    static func ic_info_account_credit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_info_account_credit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_info_account_debit", bundle: ..., traitCollection: ...)`
    static func ic_info_account_debit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_info_account_debit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_info_account_pay", bundle: ..., traitCollection: ...)`
    static func ic_info_account_pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_info_account_pay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_info_account_saving", bundle: ..., traitCollection: ...)`
    static func ic_info_account_saving(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_info_account_saving, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_interbank", bundle: ..., traitCollection: ...)`
    static func ic_interbank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_interbank, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_internalTransfer", bundle: ..., traitCollection: ...)`
    static func ic_internalTransfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_internalTransfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_internet", bundle: ..., traitCollection: ...)`
    static func ic_internet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_internet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_izi_account", bundle: ..., traitCollection: ...)`
    static func ic_izi_account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_izi_account, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_listContact", bundle: ..., traitCollection: ...)`
    static func ic_listContact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_listContact, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_loadIcon", bundle: ..., traitCollection: ...)`
    static func ic_loadIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_loadIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_loan_service", bundle: ..., traitCollection: ...)`
    static func ic_loan_service(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_loan_service, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_login", bundle: ..., traitCollection: ...)`
    static func ic_login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_login_focus", bundle: ..., traitCollection: ...)`
    static func ic_login_focus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_focus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_logo", bundle: ..., traitCollection: ...)`
    static func ic_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu_account_info", bundle: ..., traitCollection: ...)`
    static func ic_menu_account_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_account_info, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu_card_service", bundle: ..., traitCollection: ...)`
    static func ic_menu_card_service(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_card_service, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu_credit", bundle: ..., traitCollection: ...)`
    static func ic_menu_credit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_credit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu_logout", bundle: ..., traitCollection: ...)`
    static func ic_menu_logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_logout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu_mailbox", bundle: ..., traitCollection: ...)`
    static func ic_menu_mailbox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_mailbox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu_other_service", bundle: ..., traitCollection: ...)`
    static func ic_menu_other_service(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_other_service, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu_pay_service", bundle: ..., traitCollection: ...)`
    static func ic_menu_pay_service(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_pay_service, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu_recharge", bundle: ..., traitCollection: ...)`
    static func ic_menu_recharge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_recharge, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu_register_new_service", bundle: ..., traitCollection: ...)`
    static func ic_menu_register_new_service(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_register_new_service, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu_saving", bundle: ..., traitCollection: ...)`
    static func ic_menu_saving(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_saving, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu_setting", bundle: ..., traitCollection: ...)`
    static func ic_menu_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu_transfer", bundle: ..., traitCollection: ...)`
    static func ic_menu_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_transfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu_user_support", bundle: ..., traitCollection: ...)`
    static func ic_menu_user_support(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_user_support, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_more", bundle: ..., traitCollection: ...)`
    static func ic_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_nav_back", bundle: ..., traitCollection: ...)`
    static func ic_nav_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_nav_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_near", bundle: ..., traitCollection: ...)`
    static func ic_near(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_near, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_network", bundle: ..., traitCollection: ...)`
    static func ic_network(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_network, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_next", bundle: ..., traitCollection: ...)`
    static func ic_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_next, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_password", bundle: ..., traitCollection: ...)`
    static func ic_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_password, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pay_electric", bundle: ..., traitCollection: ...)`
    static func ic_pay_electric(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pay_electric, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pay_internet", bundle: ..., traitCollection: ...)`
    static func ic_pay_internet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pay_internet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pay_phone", bundle: ..., traitCollection: ...)`
    static func ic_pay_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pay_phone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pay_postpaid_mobile", bundle: ..., traitCollection: ...)`
    static func ic_pay_postpaid_mobile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pay_postpaid_mobile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pay_tv", bundle: ..., traitCollection: ...)`
    static func ic_pay_tv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pay_tv, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pay_water", bundle: ..., traitCollection: ...)`
    static func ic_pay_water(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pay_water, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_phone", bundle: ..., traitCollection: ...)`
    static func ic_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_phone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_popup_close", bundle: ..., traitCollection: ...)`
    static func ic_popup_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_popup_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_postpaid_mobile", bundle: ..., traitCollection: ...)`
    static func ic_postpaid_mobile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_postpaid_mobile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_promotion", bundle: ..., traitCollection: ...)`
    static func ic_promotion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_promotion, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_qr-code", bundle: ..., traitCollection: ...)`
    static func ic_qrCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_qrCode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_radio_check", bundle: ..., traitCollection: ...)`
    static func ic_radio_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radio_check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_radio_uncheck", bundle: ..., traitCollection: ...)`
    static func ic_radio_uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radio_uncheck, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_range_handle_image", bundle: ..., traitCollection: ...)`
    static func ic_range_handle_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_range_handle_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_registerNewService", bundle: ..., traitCollection: ...)`
    static func ic_registerNewService(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_registerNewService, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_registerNewService_1", bundle: ..., traitCollection: ...)`
    static func ic_registerNewService_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_registerNewService_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_register_credit_service", bundle: ..., traitCollection: ...)`
    static func ic_register_credit_service(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_register_credit_service, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_register_new_service", bundle: ..., traitCollection: ...)`
    static func ic_register_new_service(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_register_new_service, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_saving_Isaving", bundle: ..., traitCollection: ...)`
    static func ic_saving_Isaving(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_saving_Isaving, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_saving_addAmount", bundle: ..., traitCollection: ...)`
    static func ic_saving_addAmount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_saving_addAmount, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_saving_pay", bundle: ..., traitCollection: ...)`
    static func ic_saving_pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_saving_pay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_saving_query", bundle: ..., traitCollection: ...)`
    static func ic_saving_query(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_saving_query, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_saving_saving", bundle: ..., traitCollection: ...)`
    static func ic_saving_saving(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_saving_saving, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_saving_settlment", bundle: ..., traitCollection: ...)`
    static func ic_saving_settlment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_saving_settlment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search", bundle: ..., traitCollection: ...)`
    static func ic_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_change_otp", bundle: ..., traitCollection: ...)`
    static func ic_setting_change_otp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_change_otp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_change_pass", bundle: ..., traitCollection: ...)`
    static func ic_setting_change_pass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_change_pass, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_login_faceid", bundle: ..., traitCollection: ...)`
    static func ic_setting_login_faceid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_login_faceid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_login_toucid", bundle: ..., traitCollection: ...)`
    static func ic_setting_login_toucid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_login_toucid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_resend_otp", bundle: ..., traitCollection: ...)`
    static func ic_setting_resend_otp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_resend_otp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_transaction_faceid", bundle: ..., traitCollection: ...)`
    static func ic_setting_transaction_faceid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_transaction_faceid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_transaction_toucid", bundle: ..., traitCollection: ...)`
    static func ic_setting_transaction_toucid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_transaction_toucid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_sort", bundle: ..., traitCollection: ...)`
    static func ic_sort(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sort, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_support", bundle: ..., traitCollection: ...)`
    static func ic_support(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_support, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_supportUnit", bundle: ..., traitCollection: ...)`
    static func ic_supportUnit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_supportUnit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_support_black", bundle: ..., traitCollection: ...)`
    static func ic_support_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_support_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_home", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_home_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_home_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_home_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_menu", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_menu_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_menu_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_menu_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_pay", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_pay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_pay_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_pay_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_pay_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_saving", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_saving(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_saving, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_saving_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_saving_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_saving_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_transfer", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_transfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_transfer_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_transfer_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_transfer_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_touchid", bundle: ..., traitCollection: ...)`
    static func ic_touchid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_touchid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_transaction_statuc_fail", bundle: ..., traitCollection: ...)`
    static func ic_transaction_statuc_fail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_transaction_statuc_fail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_transaction_statuc_success", bundle: ..., traitCollection: ...)`
    static func ic_transaction_statuc_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_transaction_statuc_success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_transaction_statuc_wait", bundle: ..., traitCollection: ...)`
    static func ic_transaction_statuc_wait(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_transaction_statuc_wait, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_transaction_success", bundle: ..., traitCollection: ...)`
    static func ic_transaction_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_transaction_success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tv", bundle: ..., traitCollection: ...)`
    static func ic_tv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tv, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_uncheck", bundle: ..., traitCollection: ...)`
    static func ic_uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_uncheck, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_user", bundle: ..., traitCollection: ...)`
    static func ic_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_view", bundle: ..., traitCollection: ...)`
    static func ic_view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_view, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_visa", bundle: ..., traitCollection: ...)`
    static func ic_visa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_visa, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_wallet", bundle: ..., traitCollection: ...)`
    static func ic_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_wallet_disable", bundle: ..., traitCollection: ...)`
    static func ic_wallet_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_wallet_disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_water", bundle: ..., traitCollection: ...)`
    static func ic_water(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_water, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_scannerframe", bundle: ..., traitCollection: ...)`
    static func img_scannerframe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_scannerframe, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lag_en", bundle: ..., traitCollection: ...)`
    static func lag_en(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lag_en, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lag_vn", bundle: ..., traitCollection: ...)`
    static func lag_vn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lag_vn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_header_bg", bundle: ..., traitCollection: ...)`
    static func menu_header_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_header_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_icon_background", bundle: ..., traitCollection: ...)`
    static func menu_icon_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_icon_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "new_saving_cell_left_view", bundle: ..., traitCollection: ...)`
    static func new_saving_cell_left_view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_saving_cell_left_view, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "notification_icon", bundle: ..., traitCollection: ...)`
    static func notification_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "price_selected_bg", bundle: ..., traitCollection: ...)`
    static func price_selected_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.price_selected_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "radio_checked", bundle: ..., traitCollection: ...)`
    static func radio_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio_checked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "radio_uncheck", bundle: ..., traitCollection: ...)`
    static func radio_uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio_uncheck, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "save_beneficiary_btn", bundle: ..., traitCollection: ...)`
    static func save_beneficiary_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.save_beneficiary_btn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splash_bg", bundle: ..., traitCollection: ...)`
    static func splash_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "switch_off", bundle: ..., traitCollection: ...)`
    static func switch_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switch_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "switch_on", bundle: ..., traitCollection: ...)`
    static func switch_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switch_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transaction_info_bg", bundle: ..., traitCollection: ...)`
    static func transaction_info_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_info_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unsave_beneficiary_btn", bundle: ..., traitCollection: ...)`
    static func unsave_beneficiary_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unsave_beneficiary_btn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "up-arrow", bundle: ..., traitCollection: ...)`
    static func upArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upArrow, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 78 nibs.
  struct nib {
    /// Nib `NCBAccountDetailTableViewCell`.
    static let ncbAccountDetailTableViewCell = _R.nib._NCBAccountDetailTableViewCell()
    /// Nib `NCBAlertView`.
    static let ncbAlertView = _R.nib._NCBAlertView()
    /// Nib `NCBAnswerTableViewCell`.
    static let ncbAnswerTableViewCell = _R.nib._NCBAnswerTableViewCell()
    /// Nib `NCBAutoPaymentDetailTableViewCell`.
    static let ncbAutoPaymentDetailTableViewCell = _R.nib._NCBAutoPaymentDetailTableViewCell()
    /// Nib `NCBBankListTableViewCell`.
    static let ncbBankListTableViewCell = _R.nib._NCBBankListTableViewCell()
    /// Nib `NCBBeneficiariesUpdateActionFooterView`.
    static let ncbBeneficiariesUpdateActionFooterView = _R.nib._NCBBeneficiariesUpdateActionFooterView()
    /// Nib `NCBBeneficiariesUpdateTableViewCell`.
    static let ncbBeneficiariesUpdateTableViewCell = _R.nib._NCBBeneficiariesUpdateTableViewCell()
    /// Nib `NCBBeneficiaryListTableViewCell`.
    static let ncbBeneficiaryListTableViewCell = _R.nib._NCBBeneficiaryListTableViewCell()
    /// Nib `NCBBottomSheetDetailListTableCell`.
    static let ncbBottomSheetDetailListTableCell = _R.nib._NCBBottomSheetDetailListTableCell()
    /// Nib `NCBBottomSheetListTableCell`.
    static let ncbBottomSheetListTableCell = _R.nib._NCBBottomSheetListTableCell()
    /// Nib `NCBBranchListTableViewCell`.
    static let ncbBranchListTableViewCell = _R.nib._NCBBranchListTableViewCell()
    /// Nib `NCBCardCollectionViewCell`.
    static let ncbCardCollectionViewCell = _R.nib._NCBCardCollectionViewCell()
    /// Nib `NCBCardListTableViewCell`.
    static let ncbCardListTableViewCell = _R.nib._NCBCardListTableViewCell()
    /// Nib `NCBCardView`.
    static let ncbCardView = _R.nib._NCBCardView()
    /// Nib `NCBCreditCardDealTableViewCell`.
    static let ncbCreditCardDealTableViewCell = _R.nib._NCBCreditCardDealTableViewCell()
    /// Nib `NCBCreditCardDetailTableViewCell`.
    static let ncbCreditCardDetailTableViewCell = _R.nib._NCBCreditCardDetailTableViewCell()
    /// Nib `NCBCreditCardGeneralInfoHeaderView`.
    static let ncbCreditCardGeneralInfoHeaderView = _R.nib._NCBCreditCardGeneralInfoHeaderView()
    /// Nib `NCBCreditCardGeneralInfoTableViewCell`.
    static let ncbCreditCardGeneralInfoTableViewCell = _R.nib._NCBCreditCardGeneralInfoTableViewCell()
    /// Nib `NCBCreditCardHistoryPopupView`.
    static let ncbCreditCardHistoryPopupView = _R.nib._NCBCreditCardHistoryPopupView()
    /// Nib `NCBDebtAccountTableViewCell`.
    static let ncbDebtAccountTableViewCell = _R.nib._NCBDebtAccountTableViewCell()
    /// Nib `NCBDestinationAccountTableViewCell`.
    static let ncbDestinationAccountTableViewCell = _R.nib._NCBDestinationAccountTableViewCell()
    /// Nib `NCBDetailSavingAccountCell`.
    static let ncbDetailSavingAccountCell = _R.nib._NCBDetailSavingAccountCell()
    /// Nib `NCBDetailSavingFinalSettlementTableViewCell`.
    static let ncbDetailSavingFinalSettlementTableViewCell = _R.nib._NCBDetailSavingFinalSettlementTableViewCell()
    /// Nib `NCBExchangeRateTableViewCell`.
    static let ncbExchangeRateTableViewCell = _R.nib._NCBExchangeRateTableViewCell()
    /// Nib `NCBGeneralAccountAddTableViewCell`.
    static let ncbGeneralAccountAddTableViewCell = _R.nib._NCBGeneralAccountAddTableViewCell()
    /// Nib `NCBHeaderDetailSFSTableViewCell`.
    static let ncbHeaderDetailSFSTableViewCell = _R.nib._NCBHeaderDetailSFSTableViewCell()
    /// Nib `NCBHomeMenuIconCollectionViewCell`.
    static let ncbHomeMenuIconCollectionViewCell = _R.nib._NCBHomeMenuIconCollectionViewCell()
    /// Nib `NCBHomeMenuIconView`.
    static let ncbHomeMenuIconView = _R.nib._NCBHomeMenuIconView()
    /// Nib `NCBInterestRateTableViewCell`.
    static let ncbInterestRateTableViewCell = _R.nib._NCBInterestRateTableViewCell()
    /// Nib `NCBListAccountRegisterSMSTableViewCell`.
    static let ncbListAccountRegisterSMSTableViewCell = _R.nib._NCBListAccountRegisterSMSTableViewCell()
    /// Nib `NCBListAccountRegisterSMSView`.
    static let ncbListAccountRegisterSMSView = _R.nib._NCBListAccountRegisterSMSView()
    /// Nib `NCBListSavingAccountTableViewCell`.
    static let ncbListSavingAccountTableViewCell = _R.nib._NCBListSavingAccountTableViewCell()
    /// Nib `NCBListSubPaymentAccountView`.
    static let ncbListSubPaymentAccountView = _R.nib._NCBListSubPaymentAccountView()
    /// Nib `NCBMailboxTableViewCell`.
    static let ncbMailboxTableViewCell = _R.nib._NCBMailboxTableViewCell()
    /// Nib `NCBMenuTableViewCell`.
    static let ncbMenuTableViewCell = _R.nib._NCBMenuTableViewCell()
    /// Nib `NCBMoneyValueCollectionViewCell`.
    static let ncbMoneyValueCollectionViewCell = _R.nib._NCBMoneyValueCollectionViewCell()
    /// Nib `NCBNetTableViewCell`.
    static let ncbNetTableViewCell = _R.nib._NCBNetTableViewCell()
    /// Nib `NCBNewSaveAccountCell`.
    static let ncbNewSaveAccountCell = _R.nib._NCBNewSaveAccountCell()
    /// Nib `NCBOpenLockCardViewCell`.
    static let ncbOpenLockCardViewCell = _R.nib._NCBOpenLockCardViewCell()
    /// Nib `NCBPayBillSavedListTableViewCell`.
    static let ncbPayBillSavedListTableViewCell = _R.nib._NCBPayBillSavedListTableViewCell()
    /// Nib `NCBPaymentAccountHistoryDetailPopupView`.
    static let ncbPaymentAccountHistoryDetailPopupView = _R.nib._NCBPaymentAccountHistoryDetailPopupView()
    /// Nib `NCBPaymentAccountHistoryDetailTableViewCell`.
    static let ncbPaymentAccountHistoryDetailTableViewCell = _R.nib._NCBPaymentAccountHistoryDetailTableViewCell()
    /// Nib `NCBPaymentAccountInfoHeader`.
    static let ncbPaymentAccountInfoHeader = _R.nib._NCBPaymentAccountInfoHeader()
    /// Nib `NCBPaymentAccountStatementHeaderView`.
    static let ncbPaymentAccountStatementHeaderView = _R.nib._NCBPaymentAccountStatementHeaderView()
    /// Nib `NCBPinDetailView`.
    static let ncbPinDetailView = _R.nib._NCBPinDetailView()
    /// Nib `NCBQuestionTableViewCell`.
    static let ncbQuestionTableViewCell = _R.nib._NCBQuestionTableViewCell()
    /// Nib `NCBRechargeSavedListHeaderView`.
    static let ncbRechargeSavedListHeaderView = _R.nib._NCBRechargeSavedListHeaderView()
    /// Nib `NCBRechargeSavedListTableViewCell`.
    static let ncbRechargeSavedListTableViewCell = _R.nib._NCBRechargeSavedListTableViewCell()
    /// Nib `NCBRegisterNewAccMainTableViewCell`.
    static let ncbRegisterNewAccMainTableViewCell = _R.nib._NCBRegisterNewAccMainTableViewCell()
    /// Nib `NCBRegisterNewAccountTableViewCell`.
    static let ncbRegisterNewAccountTableViewCell = _R.nib._NCBRegisterNewAccountTableViewCell()
    /// Nib `NCBRegisterNewAcctSuccessfulTableViewCell`.
    static let ncbRegisterNewAcctSuccessfulTableViewCell = _R.nib._NCBRegisterNewAcctSuccessfulTableViewCell()
    /// Nib `NCBRegistrationATMVerifyInfoTableViewCell`.
    static let ncbRegistrationATMVerifyInfoTableViewCell = _R.nib._NCBRegistrationATMVerifyInfoTableViewCell()
    /// Nib `NCBRegistrationATMVerifyTableViewCell`.
    static let ncbRegistrationATMVerifyTableViewCell = _R.nib._NCBRegistrationATMVerifyTableViewCell()
    /// Nib `NCBRegistrationCreditCardSuccessfulTableViewCell`.
    static let ncbRegistrationCreditCardSuccessfulTableViewCell = _R.nib._NCBRegistrationCreditCardSuccessfulTableViewCell()
    /// Nib `NCBSavedListSlideCollectionViewCell`.
    static let ncbSavedListSlideCollectionViewCell = _R.nib._NCBSavedListSlideCollectionViewCell()
    /// Nib `NCBSavedListSlideView`.
    static let ncbSavedListSlideView = _R.nib._NCBSavedListSlideView()
    /// Nib `NCBSavingAccountInfoHeader`.
    static let ncbSavingAccountInfoHeader = _R.nib._NCBSavingAccountInfoHeader()
    /// Nib `NCBSavingAccountSuccessfulFooterView`.
    static let ncbSavingAccountSuccessfulFooterView = _R.nib._NCBSavingAccountSuccessfulFooterView()
    /// Nib `NCBSavingAccountTableViewCell`.
    static let ncbSavingAccountTableViewCell = _R.nib._NCBSavingAccountTableViewCell()
    /// Nib `NCBSavingAccountView`.
    static let ncbSavingAccountView = _R.nib._NCBSavingAccountView()
    /// Nib `NCBSearchDealTableViewCell`.
    static let ncbSearchDealTableViewCell = _R.nib._NCBSearchDealTableViewCell()
    /// Nib `NCBServiceCollectionViewCell`.
    static let ncbServiceCollectionViewCell = _R.nib._NCBServiceCollectionViewCell()
    /// Nib `NCBSolveDebtAccountFooterView`.
    static let ncbSolveDebtAccountFooterView = _R.nib._NCBSolveDebtAccountFooterView()
    /// Nib `NCBSourceAccountTableViewCell`.
    static let ncbSourceAccountTableViewCell = _R.nib._NCBSourceAccountTableViewCell()
    /// Nib `NCBSourceAccountView`.
    static let ncbSourceAccountView = _R.nib._NCBSourceAccountView()
    /// Nib `NCBStatmentSavingAccountTableViewCell`.
    static let ncbStatmentSavingAccountTableViewCell = _R.nib._NCBStatmentSavingAccountTableViewCell()
    /// Nib `NCBSubPaymentAccountDetailView`.
    static let ncbSubPaymentAccountDetailView = _R.nib._NCBSubPaymentAccountDetailView()
    /// Nib `NCBSubPaymentAccountTableViewCell`.
    static let ncbSubPaymentAccountTableViewCell = _R.nib._NCBSubPaymentAccountTableViewCell()
    /// Nib `NCBTailNumberCollectionViewCell`.
    static let ncbTailNumberCollectionViewCell = _R.nib._NCBTailNumberCollectionViewCell()
    /// Nib `NCBTransferInfoSavingTableViewCell`.
    static let ncbTransferInfoSavingTableViewCell = _R.nib._NCBTransferInfoSavingTableViewCell()
    /// Nib `NCBVerifyOTPView`.
    static let ncbVerifyOTPView = _R.nib._NCBVerifyOTPView()
    /// Nib `NCBVerifySavingAccountTableViewCell`.
    static let ncbVerifySavingAccountTableViewCell = _R.nib._NCBVerifySavingAccountTableViewCell()
    /// Nib `NCBVerifyTransactionAccountInfoTableViewCell`.
    static let ncbVerifyTransactionAccountInfoTableViewCell = _R.nib._NCBVerifyTransactionAccountInfoTableViewCell()
    /// Nib `NCBVerifyTransactionGeneralInfoTableViewCell`.
    static let ncbVerifyTransactionGeneralInfoTableViewCell = _R.nib._NCBVerifyTransactionGeneralInfoTableViewCell()
    /// Nib `NCBVerifyTransactionInfoTableViewCell`.
    static let ncbVerifyTransactionInfoTableViewCell = _R.nib._NCBVerifyTransactionInfoTableViewCell()
    /// Nib `NCBVerifyTransactionOtherInfoTableViewCell`.
    static let ncbVerifyTransactionOtherInfoTableViewCell = _R.nib._NCBVerifyTransactionOtherInfoTableViewCell()
    /// Nib `NCBVerifyTransferFooterView`.
    static let ncbVerifyTransferFooterView = _R.nib._NCBVerifyTransferFooterView()
    /// Nib `NCBVerifyTransferTableViewCell`.
    static let ncbVerifyTransferTableViewCell = _R.nib._NCBVerifyTransferTableViewCell()
    
    /// `UINib(name: "NCBAccountDetailTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbAccountDetailTableViewCell) instead")
    static func ncbAccountDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbAccountDetailTableViewCell)
    }
    
    /// `UINib(name: "NCBAlertView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbAlertView) instead")
    static func ncbAlertView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbAlertView)
    }
    
    /// `UINib(name: "NCBAnswerTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbAnswerTableViewCell) instead")
    static func ncbAnswerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbAnswerTableViewCell)
    }
    
    /// `UINib(name: "NCBAutoPaymentDetailTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbAutoPaymentDetailTableViewCell) instead")
    static func ncbAutoPaymentDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbAutoPaymentDetailTableViewCell)
    }
    
    /// `UINib(name: "NCBBankListTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbBankListTableViewCell) instead")
    static func ncbBankListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbBankListTableViewCell)
    }
    
    /// `UINib(name: "NCBBeneficiariesUpdateActionFooterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbBeneficiariesUpdateActionFooterView) instead")
    static func ncbBeneficiariesUpdateActionFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbBeneficiariesUpdateActionFooterView)
    }
    
    /// `UINib(name: "NCBBeneficiariesUpdateTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbBeneficiariesUpdateTableViewCell) instead")
    static func ncbBeneficiariesUpdateTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbBeneficiariesUpdateTableViewCell)
    }
    
    /// `UINib(name: "NCBBeneficiaryListTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbBeneficiaryListTableViewCell) instead")
    static func ncbBeneficiaryListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbBeneficiaryListTableViewCell)
    }
    
    /// `UINib(name: "NCBBottomSheetDetailListTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbBottomSheetDetailListTableCell) instead")
    static func ncbBottomSheetDetailListTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbBottomSheetDetailListTableCell)
    }
    
    /// `UINib(name: "NCBBottomSheetListTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbBottomSheetListTableCell) instead")
    static func ncbBottomSheetListTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbBottomSheetListTableCell)
    }
    
    /// `UINib(name: "NCBBranchListTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbBranchListTableViewCell) instead")
    static func ncbBranchListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbBranchListTableViewCell)
    }
    
    /// `UINib(name: "NCBCardCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbCardCollectionViewCell) instead")
    static func ncbCardCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbCardCollectionViewCell)
    }
    
    /// `UINib(name: "NCBCardListTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbCardListTableViewCell) instead")
    static func ncbCardListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbCardListTableViewCell)
    }
    
    /// `UINib(name: "NCBCardView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbCardView) instead")
    static func ncbCardView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbCardView)
    }
    
    /// `UINib(name: "NCBCreditCardDealTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbCreditCardDealTableViewCell) instead")
    static func ncbCreditCardDealTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbCreditCardDealTableViewCell)
    }
    
    /// `UINib(name: "NCBCreditCardDetailTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbCreditCardDetailTableViewCell) instead")
    static func ncbCreditCardDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbCreditCardDetailTableViewCell)
    }
    
    /// `UINib(name: "NCBCreditCardGeneralInfoHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbCreditCardGeneralInfoHeaderView) instead")
    static func ncbCreditCardGeneralInfoHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbCreditCardGeneralInfoHeaderView)
    }
    
    /// `UINib(name: "NCBCreditCardGeneralInfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbCreditCardGeneralInfoTableViewCell) instead")
    static func ncbCreditCardGeneralInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbCreditCardGeneralInfoTableViewCell)
    }
    
    /// `UINib(name: "NCBCreditCardHistoryPopupView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbCreditCardHistoryPopupView) instead")
    static func ncbCreditCardHistoryPopupView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbCreditCardHistoryPopupView)
    }
    
    /// `UINib(name: "NCBDebtAccountTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbDebtAccountTableViewCell) instead")
    static func ncbDebtAccountTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbDebtAccountTableViewCell)
    }
    
    /// `UINib(name: "NCBDestinationAccountTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbDestinationAccountTableViewCell) instead")
    static func ncbDestinationAccountTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbDestinationAccountTableViewCell)
    }
    
    /// `UINib(name: "NCBDetailSavingAccountCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbDetailSavingAccountCell) instead")
    static func ncbDetailSavingAccountCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbDetailSavingAccountCell)
    }
    
    /// `UINib(name: "NCBDetailSavingFinalSettlementTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbDetailSavingFinalSettlementTableViewCell) instead")
    static func ncbDetailSavingFinalSettlementTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbDetailSavingFinalSettlementTableViewCell)
    }
    
    /// `UINib(name: "NCBExchangeRateTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbExchangeRateTableViewCell) instead")
    static func ncbExchangeRateTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbExchangeRateTableViewCell)
    }
    
    /// `UINib(name: "NCBGeneralAccountAddTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbGeneralAccountAddTableViewCell) instead")
    static func ncbGeneralAccountAddTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbGeneralAccountAddTableViewCell)
    }
    
    /// `UINib(name: "NCBHeaderDetailSFSTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbHeaderDetailSFSTableViewCell) instead")
    static func ncbHeaderDetailSFSTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbHeaderDetailSFSTableViewCell)
    }
    
    /// `UINib(name: "NCBHomeMenuIconCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbHomeMenuIconCollectionViewCell) instead")
    static func ncbHomeMenuIconCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbHomeMenuIconCollectionViewCell)
    }
    
    /// `UINib(name: "NCBHomeMenuIconView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbHomeMenuIconView) instead")
    static func ncbHomeMenuIconView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbHomeMenuIconView)
    }
    
    /// `UINib(name: "NCBInterestRateTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbInterestRateTableViewCell) instead")
    static func ncbInterestRateTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbInterestRateTableViewCell)
    }
    
    /// `UINib(name: "NCBListAccountRegisterSMSTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbListAccountRegisterSMSTableViewCell) instead")
    static func ncbListAccountRegisterSMSTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbListAccountRegisterSMSTableViewCell)
    }
    
    /// `UINib(name: "NCBListAccountRegisterSMSView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbListAccountRegisterSMSView) instead")
    static func ncbListAccountRegisterSMSView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbListAccountRegisterSMSView)
    }
    
    /// `UINib(name: "NCBListSavingAccountTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbListSavingAccountTableViewCell) instead")
    static func ncbListSavingAccountTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbListSavingAccountTableViewCell)
    }
    
    /// `UINib(name: "NCBListSubPaymentAccountView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbListSubPaymentAccountView) instead")
    static func ncbListSubPaymentAccountView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbListSubPaymentAccountView)
    }
    
    /// `UINib(name: "NCBMailboxTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbMailboxTableViewCell) instead")
    static func ncbMailboxTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbMailboxTableViewCell)
    }
    
    /// `UINib(name: "NCBMenuTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbMenuTableViewCell) instead")
    static func ncbMenuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbMenuTableViewCell)
    }
    
    /// `UINib(name: "NCBMoneyValueCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbMoneyValueCollectionViewCell) instead")
    static func ncbMoneyValueCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbMoneyValueCollectionViewCell)
    }
    
    /// `UINib(name: "NCBNetTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbNetTableViewCell) instead")
    static func ncbNetTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbNetTableViewCell)
    }
    
    /// `UINib(name: "NCBNewSaveAccountCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbNewSaveAccountCell) instead")
    static func ncbNewSaveAccountCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbNewSaveAccountCell)
    }
    
    /// `UINib(name: "NCBOpenLockCardViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbOpenLockCardViewCell) instead")
    static func ncbOpenLockCardViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbOpenLockCardViewCell)
    }
    
    /// `UINib(name: "NCBPayBillSavedListTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbPayBillSavedListTableViewCell) instead")
    static func ncbPayBillSavedListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbPayBillSavedListTableViewCell)
    }
    
    /// `UINib(name: "NCBPaymentAccountHistoryDetailPopupView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbPaymentAccountHistoryDetailPopupView) instead")
    static func ncbPaymentAccountHistoryDetailPopupView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbPaymentAccountHistoryDetailPopupView)
    }
    
    /// `UINib(name: "NCBPaymentAccountHistoryDetailTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbPaymentAccountHistoryDetailTableViewCell) instead")
    static func ncbPaymentAccountHistoryDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbPaymentAccountHistoryDetailTableViewCell)
    }
    
    /// `UINib(name: "NCBPaymentAccountInfoHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbPaymentAccountInfoHeader) instead")
    static func ncbPaymentAccountInfoHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbPaymentAccountInfoHeader)
    }
    
    /// `UINib(name: "NCBPaymentAccountStatementHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbPaymentAccountStatementHeaderView) instead")
    static func ncbPaymentAccountStatementHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbPaymentAccountStatementHeaderView)
    }
    
    /// `UINib(name: "NCBPinDetailView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbPinDetailView) instead")
    static func ncbPinDetailView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbPinDetailView)
    }
    
    /// `UINib(name: "NCBQuestionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbQuestionTableViewCell) instead")
    static func ncbQuestionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbQuestionTableViewCell)
    }
    
    /// `UINib(name: "NCBRechargeSavedListHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbRechargeSavedListHeaderView) instead")
    static func ncbRechargeSavedListHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbRechargeSavedListHeaderView)
    }
    
    /// `UINib(name: "NCBRechargeSavedListTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbRechargeSavedListTableViewCell) instead")
    static func ncbRechargeSavedListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbRechargeSavedListTableViewCell)
    }
    
    /// `UINib(name: "NCBRegisterNewAccMainTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbRegisterNewAccMainTableViewCell) instead")
    static func ncbRegisterNewAccMainTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbRegisterNewAccMainTableViewCell)
    }
    
    /// `UINib(name: "NCBRegisterNewAccountTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbRegisterNewAccountTableViewCell) instead")
    static func ncbRegisterNewAccountTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbRegisterNewAccountTableViewCell)
    }
    
    /// `UINib(name: "NCBRegisterNewAcctSuccessfulTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbRegisterNewAcctSuccessfulTableViewCell) instead")
    static func ncbRegisterNewAcctSuccessfulTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbRegisterNewAcctSuccessfulTableViewCell)
    }
    
    /// `UINib(name: "NCBRegistrationATMVerifyInfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbRegistrationATMVerifyInfoTableViewCell) instead")
    static func ncbRegistrationATMVerifyInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbRegistrationATMVerifyInfoTableViewCell)
    }
    
    /// `UINib(name: "NCBRegistrationATMVerifyTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbRegistrationATMVerifyTableViewCell) instead")
    static func ncbRegistrationATMVerifyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbRegistrationATMVerifyTableViewCell)
    }
    
    /// `UINib(name: "NCBRegistrationCreditCardSuccessfulTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbRegistrationCreditCardSuccessfulTableViewCell) instead")
    static func ncbRegistrationCreditCardSuccessfulTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbRegistrationCreditCardSuccessfulTableViewCell)
    }
    
    /// `UINib(name: "NCBSavedListSlideCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbSavedListSlideCollectionViewCell) instead")
    static func ncbSavedListSlideCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbSavedListSlideCollectionViewCell)
    }
    
    /// `UINib(name: "NCBSavedListSlideView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbSavedListSlideView) instead")
    static func ncbSavedListSlideView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbSavedListSlideView)
    }
    
    /// `UINib(name: "NCBSavingAccountInfoHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbSavingAccountInfoHeader) instead")
    static func ncbSavingAccountInfoHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbSavingAccountInfoHeader)
    }
    
    /// `UINib(name: "NCBSavingAccountSuccessfulFooterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbSavingAccountSuccessfulFooterView) instead")
    static func ncbSavingAccountSuccessfulFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbSavingAccountSuccessfulFooterView)
    }
    
    /// `UINib(name: "NCBSavingAccountTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbSavingAccountTableViewCell) instead")
    static func ncbSavingAccountTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbSavingAccountTableViewCell)
    }
    
    /// `UINib(name: "NCBSavingAccountView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbSavingAccountView) instead")
    static func ncbSavingAccountView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbSavingAccountView)
    }
    
    /// `UINib(name: "NCBSearchDealTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbSearchDealTableViewCell) instead")
    static func ncbSearchDealTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbSearchDealTableViewCell)
    }
    
    /// `UINib(name: "NCBServiceCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbServiceCollectionViewCell) instead")
    static func ncbServiceCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbServiceCollectionViewCell)
    }
    
    /// `UINib(name: "NCBSolveDebtAccountFooterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbSolveDebtAccountFooterView) instead")
    static func ncbSolveDebtAccountFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbSolveDebtAccountFooterView)
    }
    
    /// `UINib(name: "NCBSourceAccountTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbSourceAccountTableViewCell) instead")
    static func ncbSourceAccountTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbSourceAccountTableViewCell)
    }
    
    /// `UINib(name: "NCBSourceAccountView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbSourceAccountView) instead")
    static func ncbSourceAccountView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbSourceAccountView)
    }
    
    /// `UINib(name: "NCBStatmentSavingAccountTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbStatmentSavingAccountTableViewCell) instead")
    static func ncbStatmentSavingAccountTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbStatmentSavingAccountTableViewCell)
    }
    
    /// `UINib(name: "NCBSubPaymentAccountDetailView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbSubPaymentAccountDetailView) instead")
    static func ncbSubPaymentAccountDetailView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbSubPaymentAccountDetailView)
    }
    
    /// `UINib(name: "NCBSubPaymentAccountTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbSubPaymentAccountTableViewCell) instead")
    static func ncbSubPaymentAccountTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbSubPaymentAccountTableViewCell)
    }
    
    /// `UINib(name: "NCBTailNumberCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbTailNumberCollectionViewCell) instead")
    static func ncbTailNumberCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbTailNumberCollectionViewCell)
    }
    
    /// `UINib(name: "NCBTransferInfoSavingTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbTransferInfoSavingTableViewCell) instead")
    static func ncbTransferInfoSavingTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbTransferInfoSavingTableViewCell)
    }
    
    /// `UINib(name: "NCBVerifyOTPView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbVerifyOTPView) instead")
    static func ncbVerifyOTPView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbVerifyOTPView)
    }
    
    /// `UINib(name: "NCBVerifySavingAccountTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbVerifySavingAccountTableViewCell) instead")
    static func ncbVerifySavingAccountTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbVerifySavingAccountTableViewCell)
    }
    
    /// `UINib(name: "NCBVerifyTransactionAccountInfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbVerifyTransactionAccountInfoTableViewCell) instead")
    static func ncbVerifyTransactionAccountInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbVerifyTransactionAccountInfoTableViewCell)
    }
    
    /// `UINib(name: "NCBVerifyTransactionGeneralInfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbVerifyTransactionGeneralInfoTableViewCell) instead")
    static func ncbVerifyTransactionGeneralInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbVerifyTransactionGeneralInfoTableViewCell)
    }
    
    /// `UINib(name: "NCBVerifyTransactionInfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbVerifyTransactionInfoTableViewCell) instead")
    static func ncbVerifyTransactionInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbVerifyTransactionInfoTableViewCell)
    }
    
    /// `UINib(name: "NCBVerifyTransactionOtherInfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbVerifyTransactionOtherInfoTableViewCell) instead")
    static func ncbVerifyTransactionOtherInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbVerifyTransactionOtherInfoTableViewCell)
    }
    
    /// `UINib(name: "NCBVerifyTransferFooterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbVerifyTransferFooterView) instead")
    static func ncbVerifyTransferFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbVerifyTransferFooterView)
    }
    
    /// `UINib(name: "NCBVerifyTransferTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ncbVerifyTransferTableViewCell) instead")
    static func ncbVerifyTransferTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ncbVerifyTransferTableViewCell)
    }
    
    static func ncbAccountDetailTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBAccountDetailTableViewCell? {
      return R.nib.ncbAccountDetailTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBAccountDetailTableViewCell
    }
    
    static func ncbAlertView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBAlertView? {
      return R.nib.ncbAlertView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBAlertView
    }
    
    static func ncbAnswerTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBAnswerTableViewCell? {
      return R.nib.ncbAnswerTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBAnswerTableViewCell
    }
    
    static func ncbAutoPaymentDetailTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBAutoPaymentDetailTableViewCell? {
      return R.nib.ncbAutoPaymentDetailTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBAutoPaymentDetailTableViewCell
    }
    
    static func ncbBankListTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBBankListTableViewCell? {
      return R.nib.ncbBankListTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBBankListTableViewCell
    }
    
    static func ncbBeneficiariesUpdateActionFooterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBBeneficiariesUpdateActionFooterView? {
      return R.nib.ncbBeneficiariesUpdateActionFooterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBBeneficiariesUpdateActionFooterView
    }
    
    static func ncbBeneficiariesUpdateTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBBeneficiariesUpdateTableViewCell? {
      return R.nib.ncbBeneficiariesUpdateTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBBeneficiariesUpdateTableViewCell
    }
    
    static func ncbBeneficiaryListTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBBeneficiaryListTableViewCell? {
      return R.nib.ncbBeneficiaryListTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBBeneficiaryListTableViewCell
    }
    
    static func ncbBottomSheetDetailListTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBBottomSheetDetailListTableCell? {
      return R.nib.ncbBottomSheetDetailListTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBBottomSheetDetailListTableCell
    }
    
    static func ncbBottomSheetListTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBBottomSheetListTableCell? {
      return R.nib.ncbBottomSheetListTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBBottomSheetListTableCell
    }
    
    static func ncbBranchListTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBBranchListTableViewCell? {
      return R.nib.ncbBranchListTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBBranchListTableViewCell
    }
    
    static func ncbCardCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCardCollectionViewCell? {
      return R.nib.ncbCardCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCardCollectionViewCell
    }
    
    static func ncbCardListTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCardListTableViewCell? {
      return R.nib.ncbCardListTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCardListTableViewCell
    }
    
    static func ncbCardView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCardView? {
      return R.nib.ncbCardView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCardView
    }
    
    static func ncbCreditCardDealTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCreditCardDealTableViewCell? {
      return R.nib.ncbCreditCardDealTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCreditCardDealTableViewCell
    }
    
    static func ncbCreditCardDetailTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCreditCardDetailTableViewCell? {
      return R.nib.ncbCreditCardDetailTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCreditCardDetailTableViewCell
    }
    
    static func ncbCreditCardGeneralInfoHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCreditCardGeneralInfoHeaderView? {
      return R.nib.ncbCreditCardGeneralInfoHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCreditCardGeneralInfoHeaderView
    }
    
    static func ncbCreditCardGeneralInfoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCreditCardGeneralInfoTableViewCell? {
      return R.nib.ncbCreditCardGeneralInfoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCreditCardGeneralInfoTableViewCell
    }
    
    static func ncbCreditCardHistoryPopupView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCreditCardHistoryPopupView? {
      return R.nib.ncbCreditCardHistoryPopupView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCreditCardHistoryPopupView
    }
    
    static func ncbDebtAccountTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBDebtAccountTableViewCell? {
      return R.nib.ncbDebtAccountTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBDebtAccountTableViewCell
    }
    
    static func ncbDestinationAccountTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBDestinationAccountTableViewCell? {
      return R.nib.ncbDestinationAccountTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBDestinationAccountTableViewCell
    }
    
    static func ncbDetailSavingAccountCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBDetailSavingAccountCell? {
      return R.nib.ncbDetailSavingAccountCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBDetailSavingAccountCell
    }
    
    static func ncbDetailSavingFinalSettlementTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBDetailSavingFinalSettlementTableViewCell? {
      return R.nib.ncbDetailSavingFinalSettlementTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBDetailSavingFinalSettlementTableViewCell
    }
    
    static func ncbExchangeRateTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBExchangeRateTableViewCell? {
      return R.nib.ncbExchangeRateTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBExchangeRateTableViewCell
    }
    
    static func ncbGeneralAccountAddTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBGeneralAccountAddTableViewCell? {
      return R.nib.ncbGeneralAccountAddTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBGeneralAccountAddTableViewCell
    }
    
    static func ncbHeaderDetailSFSTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBHeaderDetailSFSTableViewCell? {
      return R.nib.ncbHeaderDetailSFSTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBHeaderDetailSFSTableViewCell
    }
    
    static func ncbHomeMenuIconCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBHomeMenuIconCollectionViewCell? {
      return R.nib.ncbHomeMenuIconCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBHomeMenuIconCollectionViewCell
    }
    
    static func ncbHomeMenuIconView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBHomeMenuIconView? {
      return R.nib.ncbHomeMenuIconView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBHomeMenuIconView
    }
    
    static func ncbInterestRateTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBInterestRateTableViewCell? {
      return R.nib.ncbInterestRateTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBInterestRateTableViewCell
    }
    
    static func ncbListAccountRegisterSMSTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBListAccountRegisterSMSTableViewCell? {
      return R.nib.ncbListAccountRegisterSMSTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBListAccountRegisterSMSTableViewCell
    }
    
    static func ncbListAccountRegisterSMSView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBListAccountRegisterSMSView? {
      return R.nib.ncbListAccountRegisterSMSView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBListAccountRegisterSMSView
    }
    
    static func ncbListSavingAccountTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBListSavingAccountTableViewCell? {
      return R.nib.ncbListSavingAccountTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBListSavingAccountTableViewCell
    }
    
    static func ncbListSubPaymentAccountView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBListSubPaymentAccountView? {
      return R.nib.ncbListSubPaymentAccountView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBListSubPaymentAccountView
    }
    
    static func ncbMailboxTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBMailboxTableViewCell? {
      return R.nib.ncbMailboxTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBMailboxTableViewCell
    }
    
    static func ncbMenuTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBMenuTableViewCell? {
      return R.nib.ncbMenuTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBMenuTableViewCell
    }
    
    static func ncbMoneyValueCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBMoneyValueCollectionViewCell? {
      return R.nib.ncbMoneyValueCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBMoneyValueCollectionViewCell
    }
    
    static func ncbNetTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBNetTableViewCell? {
      return R.nib.ncbNetTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBNetTableViewCell
    }
    
    static func ncbNewSaveAccountCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBNewSaveAccountCell? {
      return R.nib.ncbNewSaveAccountCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBNewSaveAccountCell
    }
    
    static func ncbOpenLockCardViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBOpenLockCardViewCell? {
      return R.nib.ncbOpenLockCardViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBOpenLockCardViewCell
    }
    
    static func ncbPayBillSavedListTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBPayBillSavedListTableViewCell? {
      return R.nib.ncbPayBillSavedListTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBPayBillSavedListTableViewCell
    }
    
    static func ncbPaymentAccountHistoryDetailPopupView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBPaymentAccountHistoryDetailPopupView? {
      return R.nib.ncbPaymentAccountHistoryDetailPopupView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBPaymentAccountHistoryDetailPopupView
    }
    
    static func ncbPaymentAccountHistoryDetailTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBPaymentAccountHistoryDetailTableViewCell? {
      return R.nib.ncbPaymentAccountHistoryDetailTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBPaymentAccountHistoryDetailTableViewCell
    }
    
    static func ncbPaymentAccountInfoHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBPaymentAccountInfoHeader? {
      return R.nib.ncbPaymentAccountInfoHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBPaymentAccountInfoHeader
    }
    
    static func ncbPaymentAccountStatementHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBPaymentAccountStatementHeaderView? {
      return R.nib.ncbPaymentAccountStatementHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBPaymentAccountStatementHeaderView
    }
    
    static func ncbPinDetailView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBPinDetailView? {
      return R.nib.ncbPinDetailView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBPinDetailView
    }
    
    static func ncbQuestionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBQuestionTableViewCell? {
      return R.nib.ncbQuestionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBQuestionTableViewCell
    }
    
    static func ncbRechargeSavedListHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRechargeSavedListHeaderView? {
      return R.nib.ncbRechargeSavedListHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRechargeSavedListHeaderView
    }
    
    static func ncbRechargeSavedListTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRechargeSavedListTableViewCell? {
      return R.nib.ncbRechargeSavedListTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRechargeSavedListTableViewCell
    }
    
    static func ncbRegisterNewAccMainTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRegisterNewAccMainTableViewCell? {
      return R.nib.ncbRegisterNewAccMainTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRegisterNewAccMainTableViewCell
    }
    
    static func ncbRegisterNewAccountTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRegisterNewAccountTableViewCell? {
      return R.nib.ncbRegisterNewAccountTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRegisterNewAccountTableViewCell
    }
    
    static func ncbRegisterNewAcctSuccessfulTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRegisterNewAcctSuccessfulTableViewCell? {
      return R.nib.ncbRegisterNewAcctSuccessfulTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRegisterNewAcctSuccessfulTableViewCell
    }
    
    static func ncbRegistrationATMVerifyInfoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRegistrationATMVerifyInfoTableViewCell? {
      return R.nib.ncbRegistrationATMVerifyInfoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRegistrationATMVerifyInfoTableViewCell
    }
    
    static func ncbRegistrationATMVerifyTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRegistrationATMVerifyTableViewCell? {
      return R.nib.ncbRegistrationATMVerifyTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRegistrationATMVerifyTableViewCell
    }
    
    static func ncbRegistrationCreditCardSuccessfulTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRegistrationCreditCardSuccessfulTableViewCell? {
      return R.nib.ncbRegistrationCreditCardSuccessfulTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRegistrationCreditCardSuccessfulTableViewCell
    }
    
    static func ncbSavedListSlideCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSavedListSlideCollectionViewCell? {
      return R.nib.ncbSavedListSlideCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSavedListSlideCollectionViewCell
    }
    
    static func ncbSavedListSlideView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSavedListSlideView? {
      return R.nib.ncbSavedListSlideView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSavedListSlideView
    }
    
    static func ncbSavingAccountInfoHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSavingAccountInfoHeader? {
      return R.nib.ncbSavingAccountInfoHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSavingAccountInfoHeader
    }
    
    static func ncbSavingAccountSuccessfulFooterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSavingAccountSuccessfulFooterView? {
      return R.nib.ncbSavingAccountSuccessfulFooterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSavingAccountSuccessfulFooterView
    }
    
    static func ncbSavingAccountTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSavingAccountTableViewCell? {
      return R.nib.ncbSavingAccountTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSavingAccountTableViewCell
    }
    
    static func ncbSavingAccountView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSavingAccountView? {
      return R.nib.ncbSavingAccountView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSavingAccountView
    }
    
    static func ncbSearchDealTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSearchDealTableViewCell? {
      return R.nib.ncbSearchDealTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSearchDealTableViewCell
    }
    
    static func ncbServiceCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBServiceCollectionViewCell? {
      return R.nib.ncbServiceCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBServiceCollectionViewCell
    }
    
    static func ncbSolveDebtAccountFooterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSolveDebtAccountFooterView? {
      return R.nib.ncbSolveDebtAccountFooterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSolveDebtAccountFooterView
    }
    
    static func ncbSourceAccountTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSourceAccountTableViewCell? {
      return R.nib.ncbSourceAccountTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSourceAccountTableViewCell
    }
    
    static func ncbSourceAccountView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSourceAccountView? {
      return R.nib.ncbSourceAccountView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSourceAccountView
    }
    
    static func ncbStatmentSavingAccountTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBStatmentSavingAccountTableViewCell? {
      return R.nib.ncbStatmentSavingAccountTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBStatmentSavingAccountTableViewCell
    }
    
    static func ncbSubPaymentAccountDetailView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSubPaymentAccountDetailView? {
      return R.nib.ncbSubPaymentAccountDetailView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSubPaymentAccountDetailView
    }
    
    static func ncbSubPaymentAccountTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSubPaymentAccountTableViewCell? {
      return R.nib.ncbSubPaymentAccountTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSubPaymentAccountTableViewCell
    }
    
    static func ncbTailNumberCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBTailNumberCollectionViewCell? {
      return R.nib.ncbTailNumberCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBTailNumberCollectionViewCell
    }
    
    static func ncbTransferInfoSavingTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBTransferInfoSavingTableViewCell? {
      return R.nib.ncbTransferInfoSavingTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBTransferInfoSavingTableViewCell
    }
    
    static func ncbVerifyOTPView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifyOTPView? {
      return R.nib.ncbVerifyOTPView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifyOTPView
    }
    
    static func ncbVerifySavingAccountTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifySavingAccountTableViewCell? {
      return R.nib.ncbVerifySavingAccountTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifySavingAccountTableViewCell
    }
    
    static func ncbVerifyTransactionAccountInfoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifyTransactionAccountInfoTableViewCell? {
      return R.nib.ncbVerifyTransactionAccountInfoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifyTransactionAccountInfoTableViewCell
    }
    
    static func ncbVerifyTransactionGeneralInfoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifyTransactionGeneralInfoTableViewCell? {
      return R.nib.ncbVerifyTransactionGeneralInfoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifyTransactionGeneralInfoTableViewCell
    }
    
    static func ncbVerifyTransactionInfoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifyTransactionInfoTableViewCell? {
      return R.nib.ncbVerifyTransactionInfoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifyTransactionInfoTableViewCell
    }
    
    static func ncbVerifyTransactionOtherInfoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifyTransactionOtherInfoTableViewCell? {
      return R.nib.ncbVerifyTransactionOtherInfoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifyTransactionOtherInfoTableViewCell
    }
    
    static func ncbVerifyTransferFooterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifyTransferFooterView? {
      return R.nib.ncbVerifyTransferFooterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifyTransferFooterView
    }
    
    static func ncbVerifyTransferTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifyTransferTableViewCell? {
      return R.nib.ncbVerifyTransferTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifyTransferTableViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 54 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `NCBAccountDetailTableViewCell`.
    static let ncbAccountDetailTableViewCell: Rswift.ReuseIdentifier<NCBAccountDetailTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBAccountDetailTableViewCell")
    /// Reuse identifier `NCBAnswerTableViewCell`.
    static let ncbAnswerTableViewCell: Rswift.ReuseIdentifier<NCBAnswerTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBAnswerTableViewCell")
    /// Reuse identifier `NCBAutoPaymentDetailTableViewCellID`.
    static let ncbAutoPaymentDetailTableViewCellID: Rswift.ReuseIdentifier<NCBAutoPaymentDetailTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBAutoPaymentDetailTableViewCellID")
    /// Reuse identifier `NCBBankListTableViewCellID`.
    static let ncbBankListTableViewCellID: Rswift.ReuseIdentifier<NCBBankListTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBBankListTableViewCellID")
    /// Reuse identifier `NCBBeneficiariesUpdateTableViewCellID`.
    static let ncbBeneficiariesUpdateTableViewCellID: Rswift.ReuseIdentifier<NCBBeneficiariesUpdateTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBBeneficiariesUpdateTableViewCellID")
    /// Reuse identifier `NCBBeneficiaryListTableViewCellID`.
    static let ncbBeneficiaryListTableViewCellID: Rswift.ReuseIdentifier<NCBBeneficiaryListTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBBeneficiaryListTableViewCellID")
    /// Reuse identifier `NCBBottomSheetDetailListTableCellID`.
    static let ncbBottomSheetDetailListTableCellID: Rswift.ReuseIdentifier<NCBBottomSheetDetailListTableCell> = Rswift.ReuseIdentifier(identifier: "NCBBottomSheetDetailListTableCellID")
    /// Reuse identifier `NCBBottomSheetListTableCellID`.
    static let ncbBottomSheetListTableCellID: Rswift.ReuseIdentifier<NCBBottomSheetListTableCell> = Rswift.ReuseIdentifier(identifier: "NCBBottomSheetListTableCellID")
    /// Reuse identifier `NCBBranchListTableViewCellID`.
    static let ncbBranchListTableViewCellID: Rswift.ReuseIdentifier<NCBBranchListTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBBranchListTableViewCellID")
    /// Reuse identifier `NCBCardCollectionViewCellID`.
    static let ncbCardCollectionViewCellID: Rswift.ReuseIdentifier<NCBCardCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "NCBCardCollectionViewCellID")
    /// Reuse identifier `NCBCardListTableViewCellID`.
    static let ncbCardListTableViewCellID: Rswift.ReuseIdentifier<NCBCardListTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBCardListTableViewCellID")
    /// Reuse identifier `NCBCreditCardDealTableViewCell`.
    static let ncbCreditCardDealTableViewCell: Rswift.ReuseIdentifier<NCBCreditCardDealTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBCreditCardDealTableViewCell")
    /// Reuse identifier `NCBCreditCardDetailTableViewCellID`.
    static let ncbCreditCardDetailTableViewCellID: Rswift.ReuseIdentifier<NCBCreditCardDetailTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBCreditCardDetailTableViewCellID")
    /// Reuse identifier `NCBCreditCardGeneralInfoTableViewCellID`.
    static let ncbCreditCardGeneralInfoTableViewCellID: Rswift.ReuseIdentifier<NCBCreditCardGeneralInfoTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBCreditCardGeneralInfoTableViewCellID")
    /// Reuse identifier `NCBDebtAccountTableViewCell`.
    static let ncbDebtAccountTableViewCell: Rswift.ReuseIdentifier<NCBDebtAccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBDebtAccountTableViewCell")
    /// Reuse identifier `NCBDetailSavingAccountCell`.
    static let ncbDetailSavingAccountCell: Rswift.ReuseIdentifier<NCBDetailSavingAccountCell> = Rswift.ReuseIdentifier(identifier: "NCBDetailSavingAccountCell")
    /// Reuse identifier `NCBDetailSavingFinalSettlementTableViewCell`.
    static let ncbDetailSavingFinalSettlementTableViewCell: Rswift.ReuseIdentifier<NCBDetailSavingFinalSettlementTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBDetailSavingFinalSettlementTableViewCell")
    /// Reuse identifier `NCBExchangeRateTableViewCellID`.
    static let ncbExchangeRateTableViewCellID: Rswift.ReuseIdentifier<NCBExchangeRateTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBExchangeRateTableViewCellID")
    /// Reuse identifier `NCBGeneralAccountAddTableViewCell`.
    static let ncbGeneralAccountAddTableViewCell: Rswift.ReuseIdentifier<NCBGeneralAccountAddTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBGeneralAccountAddTableViewCell")
    /// Reuse identifier `NCBHeaderDetailSFSTableViewCell`.
    static let ncbHeaderDetailSFSTableViewCell: Rswift.ReuseIdentifier<NCBHeaderDetailSFSTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBHeaderDetailSFSTableViewCell")
    /// Reuse identifier `NCBHomeMenuIconCollectionViewCellID`.
    static let ncbHomeMenuIconCollectionViewCellID: Rswift.ReuseIdentifier<NCBHomeMenuIconCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "NCBHomeMenuIconCollectionViewCellID")
    /// Reuse identifier `NCBInterestRateTableViewCellID`.
    static let ncbInterestRateTableViewCellID: Rswift.ReuseIdentifier<NCBInterestRateTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBInterestRateTableViewCellID")
    /// Reuse identifier `NCBListAccountRegisterSMSTableViewCell`.
    static let ncbListAccountRegisterSMSTableViewCell: Rswift.ReuseIdentifier<NCBListAccountRegisterSMSTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBListAccountRegisterSMSTableViewCell")
    /// Reuse identifier `NCBListSavingAccountTableViewCell`.
    static let ncbListSavingAccountTableViewCell: Rswift.ReuseIdentifier<NCBListSavingAccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBListSavingAccountTableViewCell")
    /// Reuse identifier `NCBMailboxTableViewCellID`.
    static let ncbMailboxTableViewCellID: Rswift.ReuseIdentifier<NCBMailboxTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBMailboxTableViewCellID")
    /// Reuse identifier `NCBMenuTableViewCellID`.
    static let ncbMenuTableViewCellID: Rswift.ReuseIdentifier<NCBMenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBMenuTableViewCellID")
    /// Reuse identifier `NCBMoneyValueCollectionViewCell`.
    static let ncbMoneyValueCollectionViewCell: Rswift.ReuseIdentifier<NCBMoneyValueCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "NCBMoneyValueCollectionViewCell")
    /// Reuse identifier `NCBNetTableViewCellID`.
    static let ncbNetTableViewCellID: Rswift.ReuseIdentifier<NCBNetTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBNetTableViewCellID")
    /// Reuse identifier `NCBNewSaveAccountCell`.
    static let ncbNewSaveAccountCell: Rswift.ReuseIdentifier<NCBNewSaveAccountCell> = Rswift.ReuseIdentifier(identifier: "NCBNewSaveAccountCell")
    /// Reuse identifier `NCBOpenLockCardViewCellID`.
    static let ncbOpenLockCardViewCellID: Rswift.ReuseIdentifier<NCBOpenLockCardViewCell> = Rswift.ReuseIdentifier(identifier: "NCBOpenLockCardViewCellID")
    /// Reuse identifier `NCBPayBillSavedListTableViewCellID`.
    static let ncbPayBillSavedListTableViewCellID: Rswift.ReuseIdentifier<NCBPayBillSavedListTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBPayBillSavedListTableViewCellID")
    /// Reuse identifier `NCBPaymentAccountHistoryDetailTableViewCellID`.
    static let ncbPaymentAccountHistoryDetailTableViewCellID: Rswift.ReuseIdentifier<NCBPaymentAccountHistoryDetailTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBPaymentAccountHistoryDetailTableViewCellID")
    /// Reuse identifier `NCBQuestionTableViewCell`.
    static let ncbQuestionTableViewCell: Rswift.ReuseIdentifier<NCBQuestionTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBQuestionTableViewCell")
    /// Reuse identifier `NCBRechargeSavedListTableViewCellID`.
    static let ncbRechargeSavedListTableViewCellID: Rswift.ReuseIdentifier<NCBRechargeSavedListTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBRechargeSavedListTableViewCellID")
    /// Reuse identifier `NCBRegisterNewAccMainTableViewCellID`.
    static let ncbRegisterNewAccMainTableViewCellID: Rswift.ReuseIdentifier<NCBRegisterNewAccMainTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBRegisterNewAccMainTableViewCellID")
    /// Reuse identifier `NCBRegisterNewAcctSuccessfulTableViewCellID`.
    static let ncbRegisterNewAcctSuccessfulTableViewCellID: Rswift.ReuseIdentifier<NCBRegisterNewAcctSuccessfulTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBRegisterNewAcctSuccessfulTableViewCellID")
    /// Reuse identifier `NCBRegistrationATMVerifyInfoTableViewCellID`.
    static let ncbRegistrationATMVerifyInfoTableViewCellID: Rswift.ReuseIdentifier<NCBRegistrationATMVerifyInfoTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBRegistrationATMVerifyInfoTableViewCellID")
    /// Reuse identifier `NCBRegistrationATMVerifyTableViewCellID`.
    static let ncbRegistrationATMVerifyTableViewCellID: Rswift.ReuseIdentifier<NCBRegistrationATMVerifyTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBRegistrationATMVerifyTableViewCellID")
    /// Reuse identifier `NCBRegistrationCreditCardSuccessfulTableViewCellID`.
    static let ncbRegistrationCreditCardSuccessfulTableViewCellID: Rswift.ReuseIdentifier<NCBRegistrationCreditCardSuccessfulTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBRegistrationCreditCardSuccessfulTableViewCellID")
    /// Reuse identifier `NCBSavedListSlideCollectionViewCellID`.
    static let ncbSavedListSlideCollectionViewCellID: Rswift.ReuseIdentifier<NCBSavedListSlideCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "NCBSavedListSlideCollectionViewCellID")
    /// Reuse identifier `NCBSavingAccountTableViewCell`.
    static let ncbSavingAccountTableViewCell: Rswift.ReuseIdentifier<NCBSavingAccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBSavingAccountTableViewCell")
    /// Reuse identifier `NCBSearchDealTableViewCell`.
    static let ncbSearchDealTableViewCell: Rswift.ReuseIdentifier<NCBSearchDealTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBSearchDealTableViewCell")
    /// Reuse identifier `NCBServiceCollectionViewCellID`.
    static let ncbServiceCollectionViewCellID: Rswift.ReuseIdentifier<NCBServiceCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "NCBServiceCollectionViewCellID")
    /// Reuse identifier `NCBSourceAccountTableViewCellID`.
    static let ncbSourceAccountTableViewCellID: Rswift.ReuseIdentifier<NCBSourceAccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBSourceAccountTableViewCellID")
    /// Reuse identifier `NCBStatmentSavingAccountTableViewCell`.
    static let ncbStatmentSavingAccountTableViewCell: Rswift.ReuseIdentifier<NCBStatmentSavingAccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBStatmentSavingAccountTableViewCell")
    /// Reuse identifier `NCBSubPaymentAccountTableViewCell`.
    static let ncbSubPaymentAccountTableViewCell: Rswift.ReuseIdentifier<NCBSubPaymentAccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBSubPaymentAccountTableViewCell")
    /// Reuse identifier `NCBTailNumberCollectionViewCellID`.
    static let ncbTailNumberCollectionViewCellID: Rswift.ReuseIdentifier<NCBTailNumberCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "NCBTailNumberCollectionViewCellID")
    /// Reuse identifier `NCBTransferInfoSavingTableViewCell`.
    static let ncbTransferInfoSavingTableViewCell: Rswift.ReuseIdentifier<NCBTransferInfoSavingTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBTransferInfoSavingTableViewCell")
    /// Reuse identifier `NCBVerifySavingAccountTableViewCellID`.
    static let ncbVerifySavingAccountTableViewCellID: Rswift.ReuseIdentifier<NCBVerifySavingAccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBVerifySavingAccountTableViewCellID")
    /// Reuse identifier `NCBVerifyTransactionAccountInfoTableViewCellID`.
    static let ncbVerifyTransactionAccountInfoTableViewCellID: Rswift.ReuseIdentifier<NCBVerifyTransactionAccountInfoTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBVerifyTransactionAccountInfoTableViewCellID")
    /// Reuse identifier `NCBVerifyTransactionGeneralInfoTableViewCellID`.
    static let ncbVerifyTransactionGeneralInfoTableViewCellID: Rswift.ReuseIdentifier<NCBVerifyTransactionGeneralInfoTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBVerifyTransactionGeneralInfoTableViewCellID")
    /// Reuse identifier `NCBVerifyTransactionInfoTableViewCell`.
    static let ncbVerifyTransactionInfoTableViewCell: Rswift.ReuseIdentifier<NCBVerifyTransactionInfoTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBVerifyTransactionInfoTableViewCell")
    /// Reuse identifier `NCBVerifyTransactionOtherInfoTableViewCellID`.
    static let ncbVerifyTransactionOtherInfoTableViewCellID: Rswift.ReuseIdentifier<NCBVerifyTransactionOtherInfoTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBVerifyTransactionOtherInfoTableViewCellID")
    /// Reuse identifier `NCBVerifyTransferTableViewCellID`.
    static let ncbVerifyTransferTableViewCellID: Rswift.ReuseIdentifier<NCBVerifyTransferTableViewCell> = Rswift.ReuseIdentifier(identifier: "NCBVerifyTransferTableViewCellID")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 26 storyboards.
  struct storyboard {
    /// Storyboard `AccountInfo`.
    static let accountInfo = _R.storyboard.accountInfo()
    /// Storyboard `AutoDebtDeduction`.
    static let autoDebtDeduction = _R.storyboard.autoDebtDeduction()
    /// Storyboard `BottomSheet`.
    static let bottomSheet = _R.storyboard.bottomSheet()
    /// Storyboard `CardService`.
    static let cardService = _R.storyboard.cardService()
    /// Storyboard `ChargeMoney`.
    static let chargeMoney = _R.storyboard.chargeMoney()
    /// Storyboard `CreditCard`.
    static let creditCard = _R.storyboard.creditCard()
    /// Storyboard `CustomerSupport`.
    static let customerSupport = _R.storyboard.customerSupport()
    /// Storyboard `ExchangeRate`.
    static let exchangeRate = _R.storyboard.exchangeRate()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Mailbox`.
    static let mailbox = _R.storyboard.mailbox()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `OnlinePayment`.
    static let onlinePayment = _R.storyboard.onlinePayment()
    /// Storyboard `QRTransfer`.
    static let qrTransfer = _R.storyboard.qrTransfer()
    /// Storyboard `ReceiverList`.
    static let receiverList = _R.storyboard.receiverList()
    /// Storyboard `RegisterNewAcct`.
    static let registerNewAcct = _R.storyboard.registerNewAcct()
    /// Storyboard `RegisterNewService`.
    static let registerNewService = _R.storyboard.registerNewService()
    /// Storyboard `RegisterSMSBanking`.
    static let registerSMSBanking = _R.storyboard.registerSMSBanking()
    /// Storyboard `Saving`.
    static let saving = _R.storyboard.saving()
    /// Storyboard `SendSaving`.
    static let sendSaving = _R.storyboard.sendSaving()
    /// Storyboard `ServicePayment`.
    static let servicePayment = _R.storyboard.servicePayment()
    /// Storyboard `Setting`.
    static let setting = _R.storyboard.setting()
    /// Storyboard `Splash`.
    static let splash = _R.storyboard.splash()
    /// Storyboard `Transaction`.
    static let transaction = _R.storyboard.transaction()
    /// Storyboard `Transfer`.
    static let transfer = _R.storyboard.transfer()
    
    /// `UIStoryboard(name: "AccountInfo", bundle: ...)`
    static func accountInfo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.accountInfo)
    }
    
    /// `UIStoryboard(name: "AutoDebtDeduction", bundle: ...)`
    static func autoDebtDeduction(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.autoDebtDeduction)
    }
    
    /// `UIStoryboard(name: "BottomSheet", bundle: ...)`
    static func bottomSheet(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.bottomSheet)
    }
    
    /// `UIStoryboard(name: "CardService", bundle: ...)`
    static func cardService(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.cardService)
    }
    
    /// `UIStoryboard(name: "ChargeMoney", bundle: ...)`
    static func chargeMoney(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.chargeMoney)
    }
    
    /// `UIStoryboard(name: "CreditCard", bundle: ...)`
    static func creditCard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.creditCard)
    }
    
    /// `UIStoryboard(name: "CustomerSupport", bundle: ...)`
    static func customerSupport(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.customerSupport)
    }
    
    /// `UIStoryboard(name: "ExchangeRate", bundle: ...)`
    static func exchangeRate(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.exchangeRate)
    }
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Mailbox", bundle: ...)`
    static func mailbox(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mailbox)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "OnlinePayment", bundle: ...)`
    static func onlinePayment(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onlinePayment)
    }
    
    /// `UIStoryboard(name: "QRTransfer", bundle: ...)`
    static func qrTransfer(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.qrTransfer)
    }
    
    /// `UIStoryboard(name: "ReceiverList", bundle: ...)`
    static func receiverList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.receiverList)
    }
    
    /// `UIStoryboard(name: "RegisterNewAcct", bundle: ...)`
    static func registerNewAcct(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.registerNewAcct)
    }
    
    /// `UIStoryboard(name: "RegisterNewService", bundle: ...)`
    static func registerNewService(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.registerNewService)
    }
    
    /// `UIStoryboard(name: "RegisterSMSBanking", bundle: ...)`
    static func registerSMSBanking(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.registerSMSBanking)
    }
    
    /// `UIStoryboard(name: "Saving", bundle: ...)`
    static func saving(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.saving)
    }
    
    /// `UIStoryboard(name: "SendSaving", bundle: ...)`
    static func sendSaving(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sendSaving)
    }
    
    /// `UIStoryboard(name: "ServicePayment", bundle: ...)`
    static func servicePayment(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.servicePayment)
    }
    
    /// `UIStoryboard(name: "Setting", bundle: ...)`
    static func setting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.setting)
    }
    
    /// `UIStoryboard(name: "Splash", bundle: ...)`
    static func splash(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splash)
    }
    
    /// `UIStoryboard(name: "Transaction", bundle: ...)`
    static func transaction(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.transaction)
    }
    
    /// `UIStoryboard(name: "Transfer", bundle: ...)`
    static func transfer(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.transfer)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 23 localization keys.
    struct localizable {
      /// en translation: Bạn đã là khách hàng của NCB?
      /// 
      /// Locales: en, vi
      static let loginNcbCustomerQuestion = Rswift.StringResource(key: "login.ncb.customer.question", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Bỏ qua
      /// 
      /// Locales: en, vi
      static let commonSkipText = Rswift.StringResource(key: "common.skip.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Cập nhật
      /// 
      /// Locales: en, vi
      static let commonUpdateText = Rswift.StringResource(key: "common.update.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: FaceID
      /// 
      /// Locales: en, vi
      static let loginUseFaceIdText = Rswift.StringResource(key: "login.use.face.id.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Huỷ
      /// 
      /// Locales: en, vi
      static let commonCancelText = Rswift.StringResource(key: "common.cancel.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Hỗ trợ
      /// 
      /// Locales: en, vi
      static let loginMenuSupport = Rswift.StringResource(key: "login.menu.support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Liên hệ
      /// 
      /// Locales: en, vi
      static let loginMenuContact = Rswift.StringResource(key: "login.menu.contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Mạng lưới
      /// 
      /// Locales: en, vi
      static let loginMenuNetwork = Rswift.StringResource(key: "login.menu.network", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Mật khẩu
      /// 
      /// Locales: en, vi
      static let loginPasswordText = Rswift.StringResource(key: "login.password.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, vi
      static let commonOkText = Rswift.StringResource(key: "common.ok.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Quý khách vui lòng đến CN/PGD gần nhất hoặc liên hệ Tổng đài chăm sóc Khách hàng 18006061 để được hỗ trợ
      /// 
      /// Locales: en, vi
      static let dialogNewAccountMessage = Rswift.StringResource(key: "dialog.new.account.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Thông báo
      /// 
      /// Locales: en, vi
      static let dialogNotifyTitle = Rswift.StringResource(key: "dialog.notify.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Tên đăng nhập
      /// 
      /// Locales: en, vi
      static let loginUsernameText = Rswift.StringResource(key: "login.username.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Tôi là khách hàng NCB
      /// 
      /// Locales: en, vi
      static let loginIAmCustomer = Rswift.StringResource(key: "login.I.am.customer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Tôi là khách hàng mới
      /// 
      /// Locales: en, vi
      static let loginIAmNewCustomer = Rswift.StringResource(key: "login.I.am.new.customer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Vui lòng nhập mật khẩu đăng nhập
      /// 
      /// Locales: en, vi
      static let dialogEnterPasswordMessage = Rswift.StringResource(key: "dialog.enter.password.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Vui lòng nhập tên đăng nhập
      /// 
      /// Locales: en, vi
      static let dialogEnterUsernameMessage = Rswift.StringResource(key: "dialog.enter.username.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Vui lòng đăng nhập ứng dụng để kích hoạt đăng nhập bằng %@
      /// 
      /// Locales: en, vi
      static let dialogLoginToActiveFaceIDTouchIdMessage = Rswift.StringResource(key: "dialog.login.to.active.faceID.touchId.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: vân tay
      /// 
      /// Locales: en, vi
      static let loginUseTouchIdText = Rswift.StringResource(key: "login.use.touch.id.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Đóng
      /// 
      /// Locales: en, vi
      static let commonCloseText = Rswift.StringResource(key: "common.close.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Đăng ký dịch vụ
      /// 
      /// Locales: en, vi
      static let loginMenuRegisterService = Rswift.StringResource(key: "login.menu.register.service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Đăng nhập
      /// 
      /// Locales: en, vi
      static let loginButtonText = Rswift.StringResource(key: "login.button.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Đăng nhập bằng %@
      /// 
      /// Locales: en, vi
      static let loginWithText = Rswift.StringResource(key: "login.with.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      
      /// en translation: Bạn đã là khách hàng của NCB?
      /// 
      /// Locales: en, vi
      static func loginNcbCustomerQuestion(_: Void = ()) -> String {
        return NSLocalizedString("login.ncb.customer.question", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bỏ qua
      /// 
      /// Locales: en, vi
      static func commonSkipText(_: Void = ()) -> String {
        return NSLocalizedString("common.skip.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cập nhật
      /// 
      /// Locales: en, vi
      static func commonUpdateText(_: Void = ()) -> String {
        return NSLocalizedString("common.update.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: FaceID
      /// 
      /// Locales: en, vi
      static func loginUseFaceIdText(_: Void = ()) -> String {
        return NSLocalizedString("login.use.face.id.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Huỷ
      /// 
      /// Locales: en, vi
      static func commonCancelText(_: Void = ()) -> String {
        return NSLocalizedString("common.cancel.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hỗ trợ
      /// 
      /// Locales: en, vi
      static func loginMenuSupport(_: Void = ()) -> String {
        return NSLocalizedString("login.menu.support", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Liên hệ
      /// 
      /// Locales: en, vi
      static func loginMenuContact(_: Void = ()) -> String {
        return NSLocalizedString("login.menu.contact", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mạng lưới
      /// 
      /// Locales: en, vi
      static func loginMenuNetwork(_: Void = ()) -> String {
        return NSLocalizedString("login.menu.network", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mật khẩu
      /// 
      /// Locales: en, vi
      static func loginPasswordText(_: Void = ()) -> String {
        return NSLocalizedString("login.password.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, vi
      static func commonOkText(_: Void = ()) -> String {
        return NSLocalizedString("common.ok.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Quý khách vui lòng đến CN/PGD gần nhất hoặc liên hệ Tổng đài chăm sóc Khách hàng 18006061 để được hỗ trợ
      /// 
      /// Locales: en, vi
      static func dialogNewAccountMessage(_: Void = ()) -> String {
        return NSLocalizedString("dialog.new.account.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Thông báo
      /// 
      /// Locales: en, vi
      static func dialogNotifyTitle(_: Void = ()) -> String {
        return NSLocalizedString("dialog.notify.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tên đăng nhập
      /// 
      /// Locales: en, vi
      static func loginUsernameText(_: Void = ()) -> String {
        return NSLocalizedString("login.username.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tôi là khách hàng NCB
      /// 
      /// Locales: en, vi
      static func loginIAmCustomer(_: Void = ()) -> String {
        return NSLocalizedString("login.I.am.customer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tôi là khách hàng mới
      /// 
      /// Locales: en, vi
      static func loginIAmNewCustomer(_: Void = ()) -> String {
        return NSLocalizedString("login.I.am.new.customer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vui lòng nhập mật khẩu đăng nhập
      /// 
      /// Locales: en, vi
      static func dialogEnterPasswordMessage(_: Void = ()) -> String {
        return NSLocalizedString("dialog.enter.password.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vui lòng nhập tên đăng nhập
      /// 
      /// Locales: en, vi
      static func dialogEnterUsernameMessage(_: Void = ()) -> String {
        return NSLocalizedString("dialog.enter.username.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vui lòng đăng nhập ứng dụng để kích hoạt đăng nhập bằng %@
      /// 
      /// Locales: en, vi
      static func dialogLoginToActiveFaceIDTouchIdMessage(_ value1: String) -> String {
        return String(format: NSLocalizedString("dialog.login.to.active.faceID.touchId.message", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: vân tay
      /// 
      /// Locales: en, vi
      static func loginUseTouchIdText(_: Void = ()) -> String {
        return NSLocalizedString("login.use.touch.id.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Đóng
      /// 
      /// Locales: en, vi
      static func commonCloseText(_: Void = ()) -> String {
        return NSLocalizedString("common.close.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Đăng ký dịch vụ
      /// 
      /// Locales: en, vi
      static func loginMenuRegisterService(_: Void = ()) -> String {
        return NSLocalizedString("login.menu.register.service", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Đăng nhập
      /// 
      /// Locales: en, vi
      static func loginButtonText(_: Void = ()) -> String {
        return NSLocalizedString("login.button.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Đăng nhập bằng %@
      /// 
      /// Locales: en, vi
      static func loginWithText(_ value1: String) -> String {
        return String(format: NSLocalizedString("login.with.text", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _NCBBeneficiariesUpdateActionFooterView.validate()
      try _NCBBottomSheetDetailListTableCell.validate()
      try _NCBBottomSheetListTableCell.validate()
      try _NCBCreditCardDealTableViewCell.validate()
      try _NCBCreditCardHistoryPopupView.validate()
      try _NCBGeneralAccountAddTableViewCell.validate()
      try _NCBHomeMenuIconCollectionViewCell.validate()
      try _NCBListAccountRegisterSMSTableViewCell.validate()
      try _NCBListAccountRegisterSMSView.validate()
      try _NCBListSavingAccountTableViewCell.validate()
      try _NCBMoneyValueCollectionViewCell.validate()
      try _NCBNetTableViewCell.validate()
      try _NCBNewSaveAccountCell.validate()
      try _NCBPaymentAccountHistoryDetailPopupView.validate()
      try _NCBPaymentAccountInfoHeader.validate()
      try _NCBPinDetailView.validate()
      try _NCBQuestionTableViewCell.validate()
      try _NCBRechargeSavedListHeaderView.validate()
      try _NCBRegisterNewAccMainTableViewCell.validate()
      try _NCBRegisterNewAccountTableViewCell.validate()
      try _NCBSavingAccountTableViewCell.validate()
      try _NCBSavingAccountView.validate()
      try _NCBSourceAccountTableViewCell.validate()
      try _NCBSourceAccountView.validate()
      try _NCBSubPaymentAccountTableViewCell.validate()
      try _NCBVerifyTransactionAccountInfoTableViewCell.validate()
      try _NCBVerifyTransactionInfoTableViewCell.validate()
      try _NCBVerifyTransferFooterView.validate()
    }
    
    struct _NCBAccountDetailTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBAccountDetailTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBAccountDetailTableViewCell"
      let name = "NCBAccountDetailTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBAccountDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBAccountDetailTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBAlertView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NCBAlertView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBAlertView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBAlertView
      }
      
      fileprivate init() {}
    }
    
    struct _NCBAnswerTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBAnswerTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBAnswerTableViewCell"
      let name = "NCBAnswerTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBAnswerTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBAnswerTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBAutoPaymentDetailTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBAutoPaymentDetailTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBAutoPaymentDetailTableViewCellID"
      let name = "NCBAutoPaymentDetailTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBAutoPaymentDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBAutoPaymentDetailTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBBankListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBBankListTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBBankListTableViewCellID"
      let name = "NCBBankListTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBBankListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBBankListTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBBeneficiariesUpdateActionFooterView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NCBBeneficiariesUpdateActionFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBBeneficiariesUpdateActionFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBBeneficiariesUpdateActionFooterView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_action_delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_delete' is used in nib 'NCBBeneficiariesUpdateActionFooterView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_edit' is used in nib 'NCBBeneficiariesUpdateActionFooterView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_action_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_action_transfer' is used in nib 'NCBBeneficiariesUpdateActionFooterView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBBeneficiariesUpdateTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBBeneficiariesUpdateTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBBeneficiariesUpdateTableViewCellID"
      let name = "NCBBeneficiariesUpdateTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBBeneficiariesUpdateTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBBeneficiariesUpdateTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBBeneficiaryListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBBeneficiaryListTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBBeneficiaryListTableViewCellID"
      let name = "NCBBeneficiaryListTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBBeneficiaryListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBBeneficiaryListTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBBottomSheetDetailListTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBBottomSheetDetailListTableCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBBottomSheetDetailListTableCellID"
      let name = "NCBBottomSheetDetailListTableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBBottomSheetDetailListTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBBottomSheetDetailListTableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_radio_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_uncheck' is used in nib 'NCBBottomSheetDetailListTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBBottomSheetListTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBBottomSheetListTableCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBBottomSheetListTableCellID"
      let name = "NCBBottomSheetListTableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBBottomSheetListTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBBottomSheetListTableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_radio_check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_check' is used in nib 'NCBBottomSheetListTableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBBranchListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBBranchListTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBBranchListTableViewCellID"
      let name = "NCBBranchListTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBBranchListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBBranchListTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBCardCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBCardCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBCardCollectionViewCellID"
      let name = "NCBCardCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCardCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCardCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBCardListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBCardListTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBCardListTableViewCellID"
      let name = "NCBCardListTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCardListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCardListTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBCardView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NCBCardView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCardView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCardView
      }
      
      fileprivate init() {}
    }
    
    struct _NCBCreditCardDealTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBCreditCardDealTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBCreditCardDealTableViewCell"
      let name = "NCBCreditCardDealTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCreditCardDealTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCreditCardDealTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in nib 'NCBCreditCardDealTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBCreditCardDetailTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBCreditCardDetailTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBCreditCardDetailTableViewCellID"
      let name = "NCBCreditCardDetailTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCreditCardDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCreditCardDetailTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBCreditCardGeneralInfoHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NCBCreditCardGeneralInfoHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCreditCardGeneralInfoHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCreditCardGeneralInfoHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _NCBCreditCardGeneralInfoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBCreditCardGeneralInfoTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBCreditCardGeneralInfoTableViewCellID"
      let name = "NCBCreditCardGeneralInfoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCreditCardGeneralInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCreditCardGeneralInfoTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBCreditCardHistoryPopupView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NCBCreditCardHistoryPopupView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBCreditCardHistoryPopupView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBCreditCardHistoryPopupView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_popup_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_popup_close' is used in nib 'NCBCreditCardHistoryPopupView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBDebtAccountTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBDebtAccountTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBDebtAccountTableViewCell"
      let name = "NCBDebtAccountTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBDebtAccountTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBDebtAccountTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBDestinationAccountTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NCBDestinationAccountTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBDestinationAccountTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBDestinationAccountTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBDetailSavingAccountCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBDetailSavingAccountCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBDetailSavingAccountCell"
      let name = "NCBDetailSavingAccountCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBDetailSavingAccountCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBDetailSavingAccountCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBDetailSavingFinalSettlementTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBDetailSavingFinalSettlementTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBDetailSavingFinalSettlementTableViewCell"
      let name = "NCBDetailSavingFinalSettlementTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBDetailSavingFinalSettlementTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBDetailSavingFinalSettlementTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBExchangeRateTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBExchangeRateTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBExchangeRateTableViewCellID"
      let name = "NCBExchangeRateTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBExchangeRateTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBExchangeRateTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBGeneralAccountAddTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBGeneralAccountAddTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBGeneralAccountAddTableViewCell"
      let name = "NCBGeneralAccountAddTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBGeneralAccountAddTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBGeneralAccountAddTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_accountInfo_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_accountInfo_add' is used in nib 'NCBGeneralAccountAddTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBHeaderDetailSFSTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBHeaderDetailSFSTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBHeaderDetailSFSTableViewCell"
      let name = "NCBHeaderDetailSFSTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBHeaderDetailSFSTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBHeaderDetailSFSTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBHomeMenuIconCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBHomeMenuIconCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBHomeMenuIconCollectionViewCellID"
      let name = "NCBHomeMenuIconCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBHomeMenuIconCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBHomeMenuIconCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "menu_icon_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_icon_background' is used in nib 'NCBHomeMenuIconCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBHomeMenuIconView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NCBHomeMenuIconView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBHomeMenuIconView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBHomeMenuIconView
      }
      
      fileprivate init() {}
    }
    
    struct _NCBInterestRateTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBInterestRateTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBInterestRateTableViewCellID"
      let name = "NCBInterestRateTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBInterestRateTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBInterestRateTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBListAccountRegisterSMSTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBListAccountRegisterSMSTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBListAccountRegisterSMSTableViewCell"
      let name = "NCBListAccountRegisterSMSTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBListAccountRegisterSMSTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBListAccountRegisterSMSTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_radio_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_uncheck' is used in nib 'NCBListAccountRegisterSMSTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBListAccountRegisterSMSView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NCBListAccountRegisterSMSView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBListAccountRegisterSMSView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBListAccountRegisterSMSView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_accessory_arrow_bottom", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_accessory_arrow_bottom' is used in nib 'NCBListAccountRegisterSMSView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBListSavingAccountTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBListSavingAccountTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBListSavingAccountTableViewCell"
      let name = "NCBListSavingAccountTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBListSavingAccountTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBListSavingAccountTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_radio_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_uncheck' is used in nib 'NCBListSavingAccountTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBListSubPaymentAccountView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NCBListSubPaymentAccountView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBListSubPaymentAccountView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBListSubPaymentAccountView
      }
      
      fileprivate init() {}
    }
    
    struct _NCBMailboxTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBMailboxTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBMailboxTableViewCellID"
      let name = "NCBMailboxTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBMailboxTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBMailboxTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBMenuTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBMenuTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBMenuTableViewCellID"
      let name = "NCBMenuTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBMenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBMenuTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBMoneyValueCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBMoneyValueCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBMoneyValueCollectionViewCell"
      let name = "NCBMoneyValueCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBMoneyValueCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBMoneyValueCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "price_selected_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'price_selected_bg' is used in nib 'NCBMoneyValueCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBNetTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBNetTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBNetTableViewCellID"
      let name = "NCBNetTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBNetTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBNetTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_near", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_near' is used in nib 'NCBNetTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBNewSaveAccountCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBNewSaveAccountCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBNewSaveAccountCell"
      let name = "NCBNewSaveAccountCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBNewSaveAccountCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBNewSaveAccountCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "new_saving_cell_left_view", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'new_saving_cell_left_view' is used in nib 'NCBNewSaveAccountCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBOpenLockCardViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBOpenLockCardViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBOpenLockCardViewCellID"
      let name = "NCBOpenLockCardViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBOpenLockCardViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBOpenLockCardViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBPayBillSavedListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBPayBillSavedListTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBPayBillSavedListTableViewCellID"
      let name = "NCBPayBillSavedListTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBPayBillSavedListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBPayBillSavedListTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBPaymentAccountHistoryDetailPopupView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NCBPaymentAccountHistoryDetailPopupView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBPaymentAccountHistoryDetailPopupView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBPaymentAccountHistoryDetailPopupView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_popup_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_popup_close' is used in nib 'NCBPaymentAccountHistoryDetailPopupView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBPaymentAccountHistoryDetailTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBPaymentAccountHistoryDetailTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBPaymentAccountHistoryDetailTableViewCellID"
      let name = "NCBPaymentAccountHistoryDetailTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBPaymentAccountHistoryDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBPaymentAccountHistoryDetailTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBPaymentAccountInfoHeader: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NCBPaymentAccountInfoHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBPaymentAccountInfoHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBPaymentAccountInfoHeader
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_header_account", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_header_account' is used in nib 'NCBPaymentAccountInfoHeader', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBPaymentAccountStatementHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NCBPaymentAccountStatementHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBPaymentAccountStatementHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBPaymentAccountStatementHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _NCBPinDetailView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NCBPinDetailView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBPinDetailView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBPinDetailView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_popup_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_popup_close' is used in nib 'NCBPinDetailView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBQuestionTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBQuestionTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBQuestionTableViewCell"
      let name = "NCBQuestionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBQuestionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBQuestionTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_accessory_arrow_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_accessory_arrow_down' is used in nib 'NCBQuestionTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBRechargeSavedListHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NCBRechargeSavedListHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRechargeSavedListHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRechargeSavedListHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in nib 'NCBRechargeSavedListHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBRechargeSavedListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBRechargeSavedListTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBRechargeSavedListTableViewCellID"
      let name = "NCBRechargeSavedListTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRechargeSavedListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRechargeSavedListTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBRegisterNewAccMainTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBRegisterNewAccMainTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBRegisterNewAccMainTableViewCellID"
      let name = "NCBRegisterNewAccMainTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRegisterNewAccMainTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRegisterNewAccMainTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add' is used in nib 'NCBRegisterNewAccMainTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBRegisterNewAccountTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NCBRegisterNewAccountTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRegisterNewAccountTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRegisterNewAccountTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add' is used in nib 'NCBRegisterNewAccountTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBRegisterNewAcctSuccessfulTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBRegisterNewAcctSuccessfulTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBRegisterNewAcctSuccessfulTableViewCellID"
      let name = "NCBRegisterNewAcctSuccessfulTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRegisterNewAcctSuccessfulTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRegisterNewAcctSuccessfulTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBRegistrationATMVerifyInfoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBRegistrationATMVerifyInfoTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBRegistrationATMVerifyInfoTableViewCellID"
      let name = "NCBRegistrationATMVerifyInfoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRegistrationATMVerifyInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRegistrationATMVerifyInfoTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBRegistrationATMVerifyTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBRegistrationATMVerifyTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBRegistrationATMVerifyTableViewCellID"
      let name = "NCBRegistrationATMVerifyTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRegistrationATMVerifyTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRegistrationATMVerifyTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBRegistrationCreditCardSuccessfulTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBRegistrationCreditCardSuccessfulTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBRegistrationCreditCardSuccessfulTableViewCellID"
      let name = "NCBRegistrationCreditCardSuccessfulTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBRegistrationCreditCardSuccessfulTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBRegistrationCreditCardSuccessfulTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBSavedListSlideCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBSavedListSlideCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBSavedListSlideCollectionViewCellID"
      let name = "NCBSavedListSlideCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSavedListSlideCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSavedListSlideCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBSavedListSlideView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NCBSavedListSlideView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSavedListSlideView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSavedListSlideView
      }
      
      fileprivate init() {}
    }
    
    struct _NCBSavingAccountInfoHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NCBSavingAccountInfoHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSavingAccountInfoHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSavingAccountInfoHeader
      }
      
      fileprivate init() {}
    }
    
    struct _NCBSavingAccountSuccessfulFooterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NCBSavingAccountSuccessfulFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSavingAccountSuccessfulFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSavingAccountSuccessfulFooterView
      }
      
      fileprivate init() {}
    }
    
    struct _NCBSavingAccountTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBSavingAccountTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBSavingAccountTableViewCell"
      let name = "NCBSavingAccountTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSavingAccountTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSavingAccountTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in nib 'NCBSavingAccountTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBSavingAccountView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NCBSavingAccountView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSavingAccountView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSavingAccountView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_saving_addAmount", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_saving_addAmount' is used in nib 'NCBSavingAccountView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBSearchDealTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBSearchDealTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBSearchDealTableViewCell"
      let name = "NCBSearchDealTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSearchDealTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSearchDealTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBServiceCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBServiceCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBServiceCollectionViewCellID"
      let name = "NCBServiceCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBServiceCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBServiceCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBSolveDebtAccountFooterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NCBSolveDebtAccountFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSolveDebtAccountFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSolveDebtAccountFooterView
      }
      
      fileprivate init() {}
    }
    
    struct _NCBSourceAccountTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBSourceAccountTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBSourceAccountTableViewCellID"
      let name = "NCBSourceAccountTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSourceAccountTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSourceAccountTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_radio_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_uncheck' is used in nib 'NCBSourceAccountTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBSourceAccountView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NCBSourceAccountView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSourceAccountView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSourceAccountView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_accessory_arrow_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_accessory_arrow_down' is used in nib 'NCBSourceAccountView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBStatmentSavingAccountTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBStatmentSavingAccountTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBStatmentSavingAccountTableViewCell"
      let name = "NCBStatmentSavingAccountTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBStatmentSavingAccountTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBStatmentSavingAccountTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBSubPaymentAccountDetailView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NCBSubPaymentAccountDetailView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSubPaymentAccountDetailView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSubPaymentAccountDetailView
      }
      
      fileprivate init() {}
    }
    
    struct _NCBSubPaymentAccountTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBSubPaymentAccountTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBSubPaymentAccountTableViewCell"
      let name = "NCBSubPaymentAccountTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBSubPaymentAccountTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBSubPaymentAccountTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in nib 'NCBSubPaymentAccountTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBTailNumberCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBTailNumberCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBTailNumberCollectionViewCellID"
      let name = "NCBTailNumberCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBTailNumberCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBTailNumberCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBTransferInfoSavingTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBTransferInfoSavingTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBTransferInfoSavingTableViewCell"
      let name = "NCBTransferInfoSavingTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBTransferInfoSavingTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBTransferInfoSavingTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBVerifyOTPView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NCBVerifyOTPView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifyOTPView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifyOTPView
      }
      
      fileprivate init() {}
    }
    
    struct _NCBVerifySavingAccountTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBVerifySavingAccountTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBVerifySavingAccountTableViewCellID"
      let name = "NCBVerifySavingAccountTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifySavingAccountTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifySavingAccountTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBVerifyTransactionAccountInfoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBVerifyTransactionAccountInfoTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBVerifyTransactionAccountInfoTableViewCellID"
      let name = "NCBVerifyTransactionAccountInfoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifyTransactionAccountInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifyTransactionAccountInfoTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "connect_wire", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'connect_wire' is used in nib 'NCBVerifyTransactionAccountInfoTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBVerifyTransactionGeneralInfoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBVerifyTransactionGeneralInfoTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBVerifyTransactionGeneralInfoTableViewCellID"
      let name = "NCBVerifyTransactionGeneralInfoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifyTransactionGeneralInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifyTransactionGeneralInfoTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBVerifyTransactionInfoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NCBVerifyTransactionInfoTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBVerifyTransactionInfoTableViewCell"
      let name = "NCBVerifyTransactionInfoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifyTransactionInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifyTransactionInfoTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "connect_wire", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'connect_wire' is used in nib 'NCBVerifyTransactionInfoTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBVerifyTransactionOtherInfoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBVerifyTransactionOtherInfoTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBVerifyTransactionOtherInfoTableViewCellID"
      let name = "NCBVerifyTransactionOtherInfoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifyTransactionOtherInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifyTransactionOtherInfoTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NCBVerifyTransferFooterView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NCBVerifyTransferFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifyTransferFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifyTransferFooterView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_touchid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_touchid' is used in nib 'NCBVerifyTransferFooterView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NCBVerifyTransferTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NCBVerifyTransferTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NCBVerifyTransferTableViewCellID"
      let name = "NCBVerifyTransferTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NCBVerifyTransferTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NCBVerifyTransferTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try accountInfo.validate()
      try autoDebtDeduction.validate()
      try bottomSheet.validate()
      try cardService.validate()
      try chargeMoney.validate()
      try creditCard.validate()
      try customerSupport.validate()
      try exchangeRate.validate()
      try home.validate()
      try launchScreen.validate()
      try login.validate()
      try mailbox.validate()
      try main.validate()
      try onlinePayment.validate()
      try qrTransfer.validate()
      try receiverList.validate()
      try registerNewAcct.validate()
      try registerNewService.validate()
      try registerSMSBanking.validate()
      try saving.validate()
      try sendSaving.validate()
      try servicePayment.validate()
      try setting.validate()
      try splash.validate()
      try transaction.validate()
      try transfer.validate()
    }
    
    struct accountInfo: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AccountInfo"
      let ncbAccountInfoViewController = StoryboardViewControllerResource<NCBAccountInfoViewController>(identifier: "NCBAccountInfoViewController")
      let ncbAccountStatementViewController = StoryboardViewControllerResource<NCBAccountStatementViewController>(identifier: "NCBAccountStatementViewController")
      let ncbCalendarViewController = StoryboardViewControllerResource<NCBCalendarViewController>(identifier: "NCBCalendarViewController")
      let ncbCreditCardViewController = StoryboardViewControllerResource<NCBCreditCardViewController>(identifier: "NCBCreditCardViewController")
      let ncbDebtAccountViewController = StoryboardViewControllerResource<NCBDebtAccountViewController>(identifier: "NCBDebtAccountViewController")
      let ncbDetailAccountViewController = StoryboardViewControllerResource<NCBDetailAccountViewController>(identifier: "NCBDetailAccountViewController")
      let ncbDetailSavingAccountInfoViewController = StoryboardViewControllerResource<NCBDetailSavingAccountInfoViewController>(identifier: "NCBDetailSavingAccountInfoViewController")
      let ncbGeneralAccountViewController = StoryboardViewControllerResource<NCBGeneralAccountViewController>(identifier: "NCBGeneralAccountViewController")
      let ncbSavingAccountInfoViewController = StoryboardViewControllerResource<NCBSavingAccountInfoViewController>(identifier: "NCBSavingAccountInfoViewController")
      let ncbSearchDealOnAccountViewController = StoryboardViewControllerResource<NCBSearchDealOnAccountViewController>(identifier: "NCBSearchDealOnAccountViewController")
      let ncbSearchTransactionPaymentAccountViewController = StoryboardViewControllerResource<NCBSearchTransactionPaymentAccountViewController>(identifier: "NCBSearchTransactionPaymentAccountViewController")
      let ncbStatementSavingAccountViewController = StoryboardViewControllerResource<NCBStatementSavingAccountViewController>(identifier: "NCBStatementSavingAccountViewController")
      
      func ncbAccountInfoViewController(_: Void = ()) -> NCBAccountInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbAccountInfoViewController)
      }
      
      func ncbAccountStatementViewController(_: Void = ()) -> NCBAccountStatementViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbAccountStatementViewController)
      }
      
      func ncbCalendarViewController(_: Void = ()) -> NCBCalendarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbCalendarViewController)
      }
      
      func ncbCreditCardViewController(_: Void = ()) -> NCBCreditCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbCreditCardViewController)
      }
      
      func ncbDebtAccountViewController(_: Void = ()) -> NCBDebtAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbDebtAccountViewController)
      }
      
      func ncbDetailAccountViewController(_: Void = ()) -> NCBDetailAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbDetailAccountViewController)
      }
      
      func ncbDetailSavingAccountInfoViewController(_: Void = ()) -> NCBDetailSavingAccountInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbDetailSavingAccountInfoViewController)
      }
      
      func ncbGeneralAccountViewController(_: Void = ()) -> NCBGeneralAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbGeneralAccountViewController)
      }
      
      func ncbSavingAccountInfoViewController(_: Void = ()) -> NCBSavingAccountInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbSavingAccountInfoViewController)
      }
      
      func ncbSearchDealOnAccountViewController(_: Void = ()) -> NCBSearchDealOnAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbSearchDealOnAccountViewController)
      }
      
      func ncbSearchTransactionPaymentAccountViewController(_: Void = ()) -> NCBSearchTransactionPaymentAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbSearchTransactionPaymentAccountViewController)
      }
      
      func ncbStatementSavingAccountViewController(_: Void = ()) -> NCBStatementSavingAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbStatementSavingAccountViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "credit_cover_bottom_header_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'credit_cover_bottom_header_bg' is used in storyboard 'AccountInfo', but couldn't be loaded.") }
        if UIKit.UIImage(named: "credit_cover_header_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'credit_cover_header_bg' is used in storyboard 'AccountInfo', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_accdetail_arrow_top", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_accdetail_arrow_top' is used in storyboard 'AccountInfo', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_accdetail_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_accdetail_close' is used in storyboard 'AccountInfo', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_accountInfo_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_accountInfo_search' is used in storyboard 'AccountInfo', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in storyboard 'AccountInfo', but couldn't be loaded.") }
        if UIKit.UIImage(named: "transaction_info_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'transaction_info_bg' is used in storyboard 'AccountInfo', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.accountInfo().ncbAccountInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbAccountInfoViewController' could not be loaded from storyboard 'AccountInfo' as 'NCBAccountInfoViewController'.") }
        if _R.storyboard.accountInfo().ncbAccountStatementViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbAccountStatementViewController' could not be loaded from storyboard 'AccountInfo' as 'NCBAccountStatementViewController'.") }
        if _R.storyboard.accountInfo().ncbCalendarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbCalendarViewController' could not be loaded from storyboard 'AccountInfo' as 'NCBCalendarViewController'.") }
        if _R.storyboard.accountInfo().ncbCreditCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbCreditCardViewController' could not be loaded from storyboard 'AccountInfo' as 'NCBCreditCardViewController'.") }
        if _R.storyboard.accountInfo().ncbDebtAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbDebtAccountViewController' could not be loaded from storyboard 'AccountInfo' as 'NCBDebtAccountViewController'.") }
        if _R.storyboard.accountInfo().ncbDetailAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbDetailAccountViewController' could not be loaded from storyboard 'AccountInfo' as 'NCBDetailAccountViewController'.") }
        if _R.storyboard.accountInfo().ncbDetailSavingAccountInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbDetailSavingAccountInfoViewController' could not be loaded from storyboard 'AccountInfo' as 'NCBDetailSavingAccountInfoViewController'.") }
        if _R.storyboard.accountInfo().ncbGeneralAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbGeneralAccountViewController' could not be loaded from storyboard 'AccountInfo' as 'NCBGeneralAccountViewController'.") }
        if _R.storyboard.accountInfo().ncbSavingAccountInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbSavingAccountInfoViewController' could not be loaded from storyboard 'AccountInfo' as 'NCBSavingAccountInfoViewController'.") }
        if _R.storyboard.accountInfo().ncbSearchDealOnAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbSearchDealOnAccountViewController' could not be loaded from storyboard 'AccountInfo' as 'NCBSearchDealOnAccountViewController'.") }
        if _R.storyboard.accountInfo().ncbSearchTransactionPaymentAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbSearchTransactionPaymentAccountViewController' could not be loaded from storyboard 'AccountInfo' as 'NCBSearchTransactionPaymentAccountViewController'.") }
        if _R.storyboard.accountInfo().ncbStatementSavingAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbStatementSavingAccountViewController' could not be loaded from storyboard 'AccountInfo' as 'NCBStatementSavingAccountViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct autoDebtDeduction: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AutoDebtDeduction"
      let ncbRegisterAutoDebtDeductionViewController = StoryboardViewControllerResource<NCBRegisterAutoDebtDeductionViewController>(identifier: "NCBRegisterAutoDebtDeductionViewController")
      let ncbUnregisterAutoDebtDeductionViewController = StoryboardViewControllerResource<NCBUnregisterAutoDebtDeductionViewController>(identifier: "NCBUnregisterAutoDebtDeductionViewController")
      
      func ncbRegisterAutoDebtDeductionViewController(_: Void = ()) -> NCBRegisterAutoDebtDeductionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegisterAutoDebtDeductionViewController)
      }
      
      func ncbUnregisterAutoDebtDeductionViewController(_: Void = ()) -> NCBUnregisterAutoDebtDeductionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbUnregisterAutoDebtDeductionViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "transaction_info_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'transaction_info_bg' is used in storyboard 'AutoDebtDeduction', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.autoDebtDeduction().ncbRegisterAutoDebtDeductionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegisterAutoDebtDeductionViewController' could not be loaded from storyboard 'AutoDebtDeduction' as 'NCBRegisterAutoDebtDeductionViewController'.") }
        if _R.storyboard.autoDebtDeduction().ncbUnregisterAutoDebtDeductionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbUnregisterAutoDebtDeductionViewController' could not be loaded from storyboard 'AutoDebtDeduction' as 'NCBUnregisterAutoDebtDeductionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct bottomSheet: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BottomSheet"
      let ncbBottomSheetListViewController = StoryboardViewControllerResource<NCBBottomSheetListViewController>(identifier: "NCBBottomSheetListViewController")
      let ncbListAccountRegisterSMSViewController = StoryboardViewControllerResource<NCBListAccountRegisterSMSViewController>(identifier: "NCBListAccountRegisterSMSViewController")
      let ncbListSavingAccountViewController = StoryboardViewControllerResource<NCBListSavingAccountViewController>(identifier: "NCBListSavingAccountViewController")
      let ncbListSavingFinalSettlementAccountViewController = StoryboardViewControllerResource<NCBListSavingFinalSettlementAccountViewController>(identifier: "NCBListSavingFinalSettlementAccountViewController")
      let ncbOptionTransferViewController = StoryboardViewControllerResource<NCBOptionTransferViewController>(identifier: "NCBOptionTransferViewController")
      let ncbSourceAccountViewController = StoryboardViewControllerResource<NCBSourceAccountViewController>(identifier: "NCBSourceAccountViewController")
      let ncbotpViewController = StoryboardViewControllerResource<NCBOTPViewController>(identifier: "NCBOTPViewController")
      
      func ncbBottomSheetListViewController(_: Void = ()) -> NCBBottomSheetListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbBottomSheetListViewController)
      }
      
      func ncbListAccountRegisterSMSViewController(_: Void = ()) -> NCBListAccountRegisterSMSViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbListAccountRegisterSMSViewController)
      }
      
      func ncbListSavingAccountViewController(_: Void = ()) -> NCBListSavingAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbListSavingAccountViewController)
      }
      
      func ncbListSavingFinalSettlementAccountViewController(_: Void = ()) -> NCBListSavingFinalSettlementAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbListSavingFinalSettlementAccountViewController)
      }
      
      func ncbOptionTransferViewController(_: Void = ()) -> NCBOptionTransferViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbOptionTransferViewController)
      }
      
      func ncbSourceAccountViewController(_: Void = ()) -> NCBSourceAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbSourceAccountViewController)
      }
      
      func ncbotpViewController(_: Void = ()) -> NCBOTPViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbotpViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_feature_interbank_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_feature_interbank_transfer' is used in storyboard 'BottomSheet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_feature_internal_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_feature_internal_transfer' is used in storyboard 'BottomSheet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search' is used in storyboard 'BottomSheet', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.bottomSheet().ncbBottomSheetListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbBottomSheetListViewController' could not be loaded from storyboard 'BottomSheet' as 'NCBBottomSheetListViewController'.") }
        if _R.storyboard.bottomSheet().ncbListAccountRegisterSMSViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbListAccountRegisterSMSViewController' could not be loaded from storyboard 'BottomSheet' as 'NCBListAccountRegisterSMSViewController'.") }
        if _R.storyboard.bottomSheet().ncbListSavingAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbListSavingAccountViewController' could not be loaded from storyboard 'BottomSheet' as 'NCBListSavingAccountViewController'.") }
        if _R.storyboard.bottomSheet().ncbListSavingFinalSettlementAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbListSavingFinalSettlementAccountViewController' could not be loaded from storyboard 'BottomSheet' as 'NCBListSavingFinalSettlementAccountViewController'.") }
        if _R.storyboard.bottomSheet().ncbotpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbotpViewController' could not be loaded from storyboard 'BottomSheet' as 'NCBOTPViewController'.") }
        if _R.storyboard.bottomSheet().ncbOptionTransferViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbOptionTransferViewController' could not be loaded from storyboard 'BottomSheet' as 'NCBOptionTransferViewController'.") }
        if _R.storyboard.bottomSheet().ncbSourceAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbSourceAccountViewController' could not be loaded from storyboard 'BottomSheet' as 'NCBSourceAccountViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct cardService: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CardService"
      let ncbBranchListViewController = StoryboardViewControllerResource<NCBBranchListViewController>(identifier: "NCBBranchListViewController")
      let ncbCardReissueViewController = StoryboardViewControllerResource<NCBCardReissueViewController>(identifier: "NCBCardReissueViewController")
      let ncbCardServiceViewController = StoryboardViewControllerResource<NCBCardServiceViewController>(identifier: "NCBCardServiceViewController")
      let ncbListAccountRegistrationATMViewController = StoryboardViewControllerResource<NCBListAccountRegistrationATMViewController>(identifier: "NCBListAccountRegistrationATMViewController")
      let ncbLockCardConfirmViewController = StoryboardViewControllerResource<NCBLockCardConfirmViewController>(identifier: "NCBLockCardConfirmViewController")
      let ncbNewOpenCardConfirmViewController = StoryboardViewControllerResource<NCBNewOpenCardConfirmViewController>(identifier: "NCBNewOpenCardConfirmViewController")
      let ncbOpenCardConfirmViewController = StoryboardViewControllerResource<NCBOpenCardConfirmViewController>(identifier: "NCBOpenCardConfirmViewController")
      let ncbOpenLockCardDetailViewController = StoryboardViewControllerResource<NCBOpenLockCardDetailViewController>(identifier: "NCBOpenLockCardDetailViewController")
      let ncbOpenLockCardViewController = StoryboardViewControllerResource<NCBOpenLockCardViewController>(identifier: "NCBOpenLockCardViewController")
      let ncbRegistrationATMSuccessfulViewController = StoryboardViewControllerResource<NCBRegistrationATMSuccessfulViewController>(identifier: "NCBRegistrationATMSuccessfulViewController")
      let ncbRegistrationATMVerifyViewController = StoryboardViewControllerResource<NCBRegistrationATMVerifyViewController>(identifier: "NCBRegistrationATMVerifyViewController")
      let ncbRegistrationATMViewController = StoryboardViewControllerResource<NCBRegistrationATMViewController>(identifier: "NCBRegistrationATMViewController")
      let ncbRegistrationCardReissueVerifyViewController = StoryboardViewControllerResource<NCBRegistrationCardReissueVerifyViewController>(identifier: "NCBRegistrationCardReissueVerifyViewController")
      let ncbRegistrationCardReissueViewController = StoryboardViewControllerResource<NCBRegistrationCardReissueViewController>(identifier: "NCBRegistrationCardReissueViewController")
      let ncbRegistrationCreditCardSuccessfulViewController = StoryboardViewControllerResource<NCBRegistrationCreditCardSuccessfulViewController>(identifier: "NCBRegistrationCreditCardSuccessfulViewController")
      let ncbRegistrationCreditCardViewController = StoryboardViewControllerResource<NCBRegistrationCreditCardViewController>(identifier: "NCBRegistrationCreditCardViewController")
      let ncbRegistrationResupplyPINVerifyViewController = StoryboardViewControllerResource<NCBRegistrationResupplyPINVerifyViewController>(identifier: "NCBRegistrationResupplyPINVerifyViewController")
      let ncbRegistrationResupplyPINViewController = StoryboardViewControllerResource<NCBRegistrationResupplyPINViewController>(identifier: "NCBRegistrationResupplyPINViewController")
      let ncbResupplyPINViewController = StoryboardViewControllerResource<NCBResupplyPINViewController>(identifier: "NCBResupplyPINViewController")
      
      func ncbBranchListViewController(_: Void = ()) -> NCBBranchListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbBranchListViewController)
      }
      
      func ncbCardReissueViewController(_: Void = ()) -> NCBCardReissueViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbCardReissueViewController)
      }
      
      func ncbCardServiceViewController(_: Void = ()) -> NCBCardServiceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbCardServiceViewController)
      }
      
      func ncbListAccountRegistrationATMViewController(_: Void = ()) -> NCBListAccountRegistrationATMViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbListAccountRegistrationATMViewController)
      }
      
      func ncbLockCardConfirmViewController(_: Void = ()) -> NCBLockCardConfirmViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbLockCardConfirmViewController)
      }
      
      func ncbNewOpenCardConfirmViewController(_: Void = ()) -> NCBNewOpenCardConfirmViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbNewOpenCardConfirmViewController)
      }
      
      func ncbOpenCardConfirmViewController(_: Void = ()) -> NCBOpenCardConfirmViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbOpenCardConfirmViewController)
      }
      
      func ncbOpenLockCardDetailViewController(_: Void = ()) -> NCBOpenLockCardDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbOpenLockCardDetailViewController)
      }
      
      func ncbOpenLockCardViewController(_: Void = ()) -> NCBOpenLockCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbOpenLockCardViewController)
      }
      
      func ncbRegistrationATMSuccessfulViewController(_: Void = ()) -> NCBRegistrationATMSuccessfulViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegistrationATMSuccessfulViewController)
      }
      
      func ncbRegistrationATMVerifyViewController(_: Void = ()) -> NCBRegistrationATMVerifyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegistrationATMVerifyViewController)
      }
      
      func ncbRegistrationATMViewController(_: Void = ()) -> NCBRegistrationATMViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegistrationATMViewController)
      }
      
      func ncbRegistrationCardReissueVerifyViewController(_: Void = ()) -> NCBRegistrationCardReissueVerifyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegistrationCardReissueVerifyViewController)
      }
      
      func ncbRegistrationCardReissueViewController(_: Void = ()) -> NCBRegistrationCardReissueViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegistrationCardReissueViewController)
      }
      
      func ncbRegistrationCreditCardSuccessfulViewController(_: Void = ()) -> NCBRegistrationCreditCardSuccessfulViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegistrationCreditCardSuccessfulViewController)
      }
      
      func ncbRegistrationCreditCardViewController(_: Void = ()) -> NCBRegistrationCreditCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegistrationCreditCardViewController)
      }
      
      func ncbRegistrationResupplyPINVerifyViewController(_: Void = ()) -> NCBRegistrationResupplyPINVerifyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegistrationResupplyPINVerifyViewController)
      }
      
      func ncbRegistrationResupplyPINViewController(_: Void = ()) -> NCBRegistrationResupplyPINViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegistrationResupplyPINViewController)
      }
      
      func ncbResupplyPINViewController(_: Void = ()) -> NCBResupplyPINViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbResupplyPINViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_bottomsheet_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bottomsheet_close' is used in storyboard 'CardService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_faceid_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_faceid_blue' is used in storyboard 'CardService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radio_check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_check' is used in storyboard 'CardService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radio_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_uncheck' is used in storyboard 'CardService', but couldn't be loaded.") }
        if UIKit.UIImage(named: "transaction_info_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'transaction_info_bg' is used in storyboard 'CardService', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.cardService().ncbBranchListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbBranchListViewController' could not be loaded from storyboard 'CardService' as 'NCBBranchListViewController'.") }
        if _R.storyboard.cardService().ncbCardReissueViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbCardReissueViewController' could not be loaded from storyboard 'CardService' as 'NCBCardReissueViewController'.") }
        if _R.storyboard.cardService().ncbCardServiceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbCardServiceViewController' could not be loaded from storyboard 'CardService' as 'NCBCardServiceViewController'.") }
        if _R.storyboard.cardService().ncbListAccountRegistrationATMViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbListAccountRegistrationATMViewController' could not be loaded from storyboard 'CardService' as 'NCBListAccountRegistrationATMViewController'.") }
        if _R.storyboard.cardService().ncbLockCardConfirmViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbLockCardConfirmViewController' could not be loaded from storyboard 'CardService' as 'NCBLockCardConfirmViewController'.") }
        if _R.storyboard.cardService().ncbNewOpenCardConfirmViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbNewOpenCardConfirmViewController' could not be loaded from storyboard 'CardService' as 'NCBNewOpenCardConfirmViewController'.") }
        if _R.storyboard.cardService().ncbOpenCardConfirmViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbOpenCardConfirmViewController' could not be loaded from storyboard 'CardService' as 'NCBOpenCardConfirmViewController'.") }
        if _R.storyboard.cardService().ncbOpenLockCardDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbOpenLockCardDetailViewController' could not be loaded from storyboard 'CardService' as 'NCBOpenLockCardDetailViewController'.") }
        if _R.storyboard.cardService().ncbOpenLockCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbOpenLockCardViewController' could not be loaded from storyboard 'CardService' as 'NCBOpenLockCardViewController'.") }
        if _R.storyboard.cardService().ncbRegistrationATMSuccessfulViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegistrationATMSuccessfulViewController' could not be loaded from storyboard 'CardService' as 'NCBRegistrationATMSuccessfulViewController'.") }
        if _R.storyboard.cardService().ncbRegistrationATMVerifyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegistrationATMVerifyViewController' could not be loaded from storyboard 'CardService' as 'NCBRegistrationATMVerifyViewController'.") }
        if _R.storyboard.cardService().ncbRegistrationATMViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegistrationATMViewController' could not be loaded from storyboard 'CardService' as 'NCBRegistrationATMViewController'.") }
        if _R.storyboard.cardService().ncbRegistrationCardReissueVerifyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegistrationCardReissueVerifyViewController' could not be loaded from storyboard 'CardService' as 'NCBRegistrationCardReissueVerifyViewController'.") }
        if _R.storyboard.cardService().ncbRegistrationCardReissueViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegistrationCardReissueViewController' could not be loaded from storyboard 'CardService' as 'NCBRegistrationCardReissueViewController'.") }
        if _R.storyboard.cardService().ncbRegistrationCreditCardSuccessfulViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegistrationCreditCardSuccessfulViewController' could not be loaded from storyboard 'CardService' as 'NCBRegistrationCreditCardSuccessfulViewController'.") }
        if _R.storyboard.cardService().ncbRegistrationCreditCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegistrationCreditCardViewController' could not be loaded from storyboard 'CardService' as 'NCBRegistrationCreditCardViewController'.") }
        if _R.storyboard.cardService().ncbRegistrationResupplyPINVerifyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegistrationResupplyPINVerifyViewController' could not be loaded from storyboard 'CardService' as 'NCBRegistrationResupplyPINVerifyViewController'.") }
        if _R.storyboard.cardService().ncbRegistrationResupplyPINViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegistrationResupplyPINViewController' could not be loaded from storyboard 'CardService' as 'NCBRegistrationResupplyPINViewController'.") }
        if _R.storyboard.cardService().ncbResupplyPINViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbResupplyPINViewController' could not be loaded from storyboard 'CardService' as 'NCBResupplyPINViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct chargeMoney: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChargeMoney"
      let ncbChargeAirpayViewController = StoryboardViewControllerResource<NCBChargeAirpayViewController>(identifier: "NCBChargeAirpayViewController")
      let ncbChargeMoneyPhoneNumberViewController = StoryboardViewControllerResource<NCBChargeMoneyPhoneNumberViewController>(identifier: "NCBChargeMoneyPhoneNumberViewController")
      let ncbChargeMoneyViewController = StoryboardViewControllerResource<NCBChargeMoneyViewController>(identifier: "NCBChargeMoneyViewController")
      let ncbRechargeDetailViewController = StoryboardViewControllerResource<NCBRechargeDetailViewController>(identifier: "NCBRechargeDetailViewController")
      
      func ncbChargeAirpayViewController(_: Void = ()) -> NCBChargeAirpayViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbChargeAirpayViewController)
      }
      
      func ncbChargeMoneyPhoneNumberViewController(_: Void = ()) -> NCBChargeMoneyPhoneNumberViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbChargeMoneyPhoneNumberViewController)
      }
      
      func ncbChargeMoneyViewController(_: Void = ()) -> NCBChargeMoneyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbChargeMoneyViewController)
      }
      
      func ncbRechargeDetailViewController(_: Void = ()) -> NCBRechargeDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRechargeDetailViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "contacts", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'contacts' is used in storyboard 'ChargeMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_charge_money_contacts", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_charge_money_contacts' is used in storyboard 'ChargeMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in storyboard 'ChargeMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "switch_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'switch_off' is used in storyboard 'ChargeMoney', but couldn't be loaded.") }
        if UIKit.UIImage(named: "switch_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'switch_on' is used in storyboard 'ChargeMoney', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.chargeMoney().ncbChargeAirpayViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbChargeAirpayViewController' could not be loaded from storyboard 'ChargeMoney' as 'NCBChargeAirpayViewController'.") }
        if _R.storyboard.chargeMoney().ncbChargeMoneyPhoneNumberViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbChargeMoneyPhoneNumberViewController' could not be loaded from storyboard 'ChargeMoney' as 'NCBChargeMoneyPhoneNumberViewController'.") }
        if _R.storyboard.chargeMoney().ncbChargeMoneyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbChargeMoneyViewController' could not be loaded from storyboard 'ChargeMoney' as 'NCBChargeMoneyViewController'.") }
        if _R.storyboard.chargeMoney().ncbRechargeDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRechargeDetailViewController' could not be loaded from storyboard 'ChargeMoney' as 'NCBRechargeDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct creditCard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CreditCard"
      let ncbCreditCardGeneralInfoViewController = StoryboardViewControllerResource<NCBCreditCardGeneralInfoViewController>(identifier: "NCBCreditCardGeneralInfoViewController")
      let ncbCreditCardListViewController = StoryboardViewControllerResource<NCBCreditCardListViewController>(identifier: "NCBCreditCardListViewController")
      let ncbCreditCardPaymentCardHolderViewController = StoryboardViewControllerResource<NCBCreditCardPaymentCardHolderViewController>(identifier: "NCBCreditCardPaymentCardHolderViewController")
      let ncbCreditCardPaymentOtherCardViewController = StoryboardViewControllerResource<NCBCreditCardPaymentOtherCardViewController>(identifier: "NCBCreditCardPaymentOtherCardViewController")
      let ncbCreditCardPaymentViewController = StoryboardViewControllerResource<NCBCreditCardPaymentViewController>(identifier: "NCBCreditCardPaymentViewController")
      let ncbCreditCardStatementViewController = StoryboardViewControllerResource<NCBCreditCardStatementViewController>(identifier: "NCBCreditCardStatementViewController")
      
      func ncbCreditCardGeneralInfoViewController(_: Void = ()) -> NCBCreditCardGeneralInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbCreditCardGeneralInfoViewController)
      }
      
      func ncbCreditCardListViewController(_: Void = ()) -> NCBCreditCardListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbCreditCardListViewController)
      }
      
      func ncbCreditCardPaymentCardHolderViewController(_: Void = ()) -> NCBCreditCardPaymentCardHolderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbCreditCardPaymentCardHolderViewController)
      }
      
      func ncbCreditCardPaymentOtherCardViewController(_: Void = ()) -> NCBCreditCardPaymentOtherCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbCreditCardPaymentOtherCardViewController)
      }
      
      func ncbCreditCardPaymentViewController(_: Void = ()) -> NCBCreditCardPaymentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbCreditCardPaymentViewController)
      }
      
      func ncbCreditCardStatementViewController(_: Void = ()) -> NCBCreditCardStatementViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbCreditCardStatementViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bg_default_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_default_card' is used in storyboard 'CreditCard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "credit_cover_bottom_header_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'credit_cover_bottom_header_bg' is used in storyboard 'CreditCard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "credit_cover_header_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'credit_cover_header_bg' is used in storyboard 'CreditCard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radio_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_uncheck' is used in storyboard 'CreditCard', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.creditCard().ncbCreditCardGeneralInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbCreditCardGeneralInfoViewController' could not be loaded from storyboard 'CreditCard' as 'NCBCreditCardGeneralInfoViewController'.") }
        if _R.storyboard.creditCard().ncbCreditCardListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbCreditCardListViewController' could not be loaded from storyboard 'CreditCard' as 'NCBCreditCardListViewController'.") }
        if _R.storyboard.creditCard().ncbCreditCardPaymentCardHolderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbCreditCardPaymentCardHolderViewController' could not be loaded from storyboard 'CreditCard' as 'NCBCreditCardPaymentCardHolderViewController'.") }
        if _R.storyboard.creditCard().ncbCreditCardPaymentOtherCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbCreditCardPaymentOtherCardViewController' could not be loaded from storyboard 'CreditCard' as 'NCBCreditCardPaymentOtherCardViewController'.") }
        if _R.storyboard.creditCard().ncbCreditCardPaymentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbCreditCardPaymentViewController' could not be loaded from storyboard 'CreditCard' as 'NCBCreditCardPaymentViewController'.") }
        if _R.storyboard.creditCard().ncbCreditCardStatementViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbCreditCardStatementViewController' could not be loaded from storyboard 'CreditCard' as 'NCBCreditCardStatementViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct customerSupport: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CustomerSupport"
      let ncbCustomerInfomationViewController = StoryboardViewControllerResource<NCBCustomerInfomationViewController>(identifier: "NCBCustomerInfomationViewController")
      let ncbCustomerSupportHomeViewController = StoryboardViewControllerResource<NCBCustomerSupportHomeViewController>(identifier: "NCBCustomerSupportHomeViewController")
      let ncbFeedbackToApplicationErrorViewController = StoryboardViewControllerResource<NCBFeedbackToApplicationViewController>(identifier: "NCBFeedbackToApplicationErrorViewController")
      let ncbFrequentlyQuestionViewController = StoryboardViewControllerResource<NCBFrequentlyQuestionViewController>(identifier: "NCBFrequentlyQuestionViewController")
      let ncbUserGuideViewController = StoryboardViewControllerResource<NCBUserGuideViewController>(identifier: "NCBUserGuideViewController")
      
      func ncbCustomerInfomationViewController(_: Void = ()) -> NCBCustomerInfomationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbCustomerInfomationViewController)
      }
      
      func ncbCustomerSupportHomeViewController(_: Void = ()) -> NCBCustomerSupportHomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbCustomerSupportHomeViewController)
      }
      
      func ncbFeedbackToApplicationErrorViewController(_: Void = ()) -> NCBFeedbackToApplicationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbFeedbackToApplicationErrorViewController)
      }
      
      func ncbFrequentlyQuestionViewController(_: Void = ()) -> NCBFrequentlyQuestionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbFrequentlyQuestionViewController)
      }
      
      func ncbUserGuideViewController(_: Void = ()) -> NCBUserGuideViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbUserGuideViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "transaction_info_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'transaction_info_bg' is used in storyboard 'CustomerSupport', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.customerSupport().ncbCustomerInfomationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbCustomerInfomationViewController' could not be loaded from storyboard 'CustomerSupport' as 'NCBCustomerInfomationViewController'.") }
        if _R.storyboard.customerSupport().ncbCustomerSupportHomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbCustomerSupportHomeViewController' could not be loaded from storyboard 'CustomerSupport' as 'NCBCustomerSupportHomeViewController'.") }
        if _R.storyboard.customerSupport().ncbFeedbackToApplicationErrorViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbFeedbackToApplicationErrorViewController' could not be loaded from storyboard 'CustomerSupport' as 'NCBFeedbackToApplicationViewController'.") }
        if _R.storyboard.customerSupport().ncbFrequentlyQuestionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbFrequentlyQuestionViewController' could not be loaded from storyboard 'CustomerSupport' as 'NCBFrequentlyQuestionViewController'.") }
        if _R.storyboard.customerSupport().ncbUserGuideViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbUserGuideViewController' could not be loaded from storyboard 'CustomerSupport' as 'NCBUserGuideViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct exchangeRate: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ExchangeRate"
      let ncbExchangeRateViewController = StoryboardViewControllerResource<NCBExchangeRateViewController>(identifier: "NCBExchangeRateViewController")
      let ncbInterestRateViewController = StoryboardViewControllerResource<NCBInterestRateViewController>(identifier: "NCBInterestRateViewController")
      let ncbNetMapViewController = StoryboardViewControllerResource<NCBNetMapViewController>(identifier: "NCBNetMapViewController")
      
      func ncbExchangeRateViewController(_: Void = ()) -> NCBExchangeRateViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbExchangeRateViewController)
      }
      
      func ncbInterestRateViewController(_: Void = ()) -> NCBInterestRateViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbInterestRateViewController)
      }
      
      func ncbNetMapViewController(_: Void = ()) -> NCBNetMapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbNetMapViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.exchangeRate().ncbExchangeRateViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbExchangeRateViewController' could not be loaded from storyboard 'ExchangeRate' as 'NCBExchangeRateViewController'.") }
        if _R.storyboard.exchangeRate().ncbInterestRateViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbInterestRateViewController' could not be loaded from storyboard 'ExchangeRate' as 'NCBInterestRateViewController'.") }
        if _R.storyboard.exchangeRate().ncbNetMapViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbNetMapViewController' could not be loaded from storyboard 'ExchangeRate' as 'NCBNetMapViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct home: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Home"
      let ncbSearchTransactionViewController = StoryboardViewControllerResource<NCBSearchTransactionViewController>(identifier: "NCBSearchTransactionViewController")
      let ncbSetupServiceViewController = StoryboardViewControllerResource<NCBSetupServiceViewController>(identifier: "NCBSetupServiceViewController")
      
      func ncbSearchTransactionViewController(_: Void = ()) -> NCBSearchTransactionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbSearchTransactionViewController)
      }
      
      func ncbSetupServiceViewController(_: Void = ()) -> NCBSetupServiceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbSetupServiceViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.home().ncbSearchTransactionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbSearchTransactionViewController' could not be loaded from storyboard 'Home' as 'NCBSearchTransactionViewController'.") }
        if _R.storyboard.home().ncbSetupServiceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbSetupServiceViewController' could not be loaded from storyboard 'Home' as 'NCBSetupServiceViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NCBMainLoginViewController
      
      let bundle = R.hostingBundle
      let name = "Login"
      let ncbAuthenticateLoginOtherDeviceViewController = StoryboardViewControllerResource<NCBAuthenticateLoginOtherDeviceViewController>(identifier: "NCBAuthenticateLoginOtherDeviceViewController")
      let ncbAuthenticateViewController = StoryboardViewControllerResource<NCBAuthenticateViewController>(identifier: "NCBAuthenticateViewController")
      let ncbChangePasswordViewController = StoryboardViewControllerResource<NCBChangePasswordViewController>(identifier: "NCBChangePasswordViewController")
      let ncbMainLoginViewController = StoryboardViewControllerResource<NCBMainLoginViewController>(identifier: "NCBMainLoginViewController")
      let ncbPermissionAndPolicyViewController = StoryboardViewControllerResource<NCBPermissionAndPolicyViewController>(identifier: "NCBPermissionAndPolicyViewController")
      
      func ncbAuthenticateLoginOtherDeviceViewController(_: Void = ()) -> NCBAuthenticateLoginOtherDeviceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbAuthenticateLoginOtherDeviceViewController)
      }
      
      func ncbAuthenticateViewController(_: Void = ()) -> NCBAuthenticateViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbAuthenticateViewController)
      }
      
      func ncbChangePasswordViewController(_: Void = ()) -> NCBChangePasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbChangePasswordViewController)
      }
      
      func ncbMainLoginViewController(_: Void = ()) -> NCBMainLoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbMainLoginViewController)
      }
      
      func ncbPermissionAndPolicyViewController(_: Void = ()) -> NCBPermissionAndPolicyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbPermissionAndPolicyViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio_checked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio_checked' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio_uncheck' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splash_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash_bg' is used in storyboard 'Login', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.login().ncbAuthenticateLoginOtherDeviceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbAuthenticateLoginOtherDeviceViewController' could not be loaded from storyboard 'Login' as 'NCBAuthenticateLoginOtherDeviceViewController'.") }
        if _R.storyboard.login().ncbAuthenticateViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbAuthenticateViewController' could not be loaded from storyboard 'Login' as 'NCBAuthenticateViewController'.") }
        if _R.storyboard.login().ncbChangePasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbChangePasswordViewController' could not be loaded from storyboard 'Login' as 'NCBChangePasswordViewController'.") }
        if _R.storyboard.login().ncbMainLoginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbMainLoginViewController' could not be loaded from storyboard 'Login' as 'NCBMainLoginViewController'.") }
        if _R.storyboard.login().ncbPermissionAndPolicyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbPermissionAndPolicyViewController' could not be loaded from storyboard 'Login' as 'NCBPermissionAndPolicyViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mailbox: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Mailbox"
      let ncbMailboxDetailViewController = StoryboardViewControllerResource<NCBMailboxDetailViewController>(identifier: "NCBMailboxDetailViewController")
      let ncbMailboxViewController = StoryboardViewControllerResource<NCBMailboxViewController>(identifier: "NCBMailboxViewController")
      
      func ncbMailboxDetailViewController(_: Void = ()) -> NCBMailboxDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbMailboxDetailViewController)
      }
      
      func ncbMailboxViewController(_: Void = ()) -> NCBMailboxViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbMailboxViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.mailbox().ncbMailboxDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbMailboxDetailViewController' could not be loaded from storyboard 'Mailbox' as 'NCBMailboxDetailViewController'.") }
        if _R.storyboard.mailbox().ncbMailboxViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbMailboxViewController' could not be loaded from storyboard 'Mailbox' as 'NCBMailboxViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Main"
      let ncbHomeViewController = StoryboardViewControllerResource<NCBHomeViewController>(identifier: "NCBHomeViewController")
      let ncbMenuViewController = StoryboardViewControllerResource<NCBMenuViewController>(identifier: "NCBMenuViewController")
      let ncbPayViewController = StoryboardViewControllerResource<NCBPayViewController>(identifier: "NCBPayViewController")
      let ncbSavingAccountViewController = StoryboardViewControllerResource<NCBSavingAccountViewController>(identifier: "NCBSavingAccountViewController")
      let ncbTransferViewController = StoryboardViewControllerResource<NCBTransferViewController>(identifier: "NCBTransferViewController")
      
      func ncbHomeViewController(_: Void = ()) -> NCBHomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbHomeViewController)
      }
      
      func ncbMenuViewController(_: Void = ()) -> NCBMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbMenuViewController)
      }
      
      func ncbPayViewController(_: Void = ()) -> NCBPayViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbPayViewController)
      }
      
      func ncbSavingAccountViewController(_: Void = ()) -> NCBSavingAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbSavingAccountViewController)
      }
      
      func ncbTransferViewController(_: Void = ()) -> NCBTransferViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbTransferViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "cover_nav_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cover_nav_background' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "default_avatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default_avatar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_call", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_call' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_next' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu_header_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_header_bg' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().ncbHomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbHomeViewController' could not be loaded from storyboard 'Main' as 'NCBHomeViewController'.") }
        if _R.storyboard.main().ncbMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbMenuViewController' could not be loaded from storyboard 'Main' as 'NCBMenuViewController'.") }
        if _R.storyboard.main().ncbPayViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbPayViewController' could not be loaded from storyboard 'Main' as 'NCBPayViewController'.") }
        if _R.storyboard.main().ncbSavingAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbSavingAccountViewController' could not be loaded from storyboard 'Main' as 'NCBSavingAccountViewController'.") }
        if _R.storyboard.main().ncbTransferViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbTransferViewController' could not be loaded from storyboard 'Main' as 'NCBTransferViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct onlinePayment: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnlinePayment"
      let ncbCardCompletedServiceViewController = StoryboardViewControllerResource<NCBCardCompletedServiceViewController>(identifier: "NCBCardCompletedServiceViewController")
      let ncbOnlinePaymentRegisterViewController = StoryboardViewControllerResource<NCBOnlinePaymentRegisterViewController>(identifier: "NCBOnlinePaymentRegisterViewController")
      let ncbOnlinePaymentVerifyViewController = StoryboardViewControllerResource<NCBOnlinePaymentVerifyViewController>(identifier: "NCBOnlinePaymentVerifyViewController")
      
      func ncbCardCompletedServiceViewController(_: Void = ()) -> NCBCardCompletedServiceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbCardCompletedServiceViewController)
      }
      
      func ncbOnlinePaymentRegisterViewController(_: Void = ()) -> NCBOnlinePaymentRegisterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbOnlinePaymentRegisterViewController)
      }
      
      func ncbOnlinePaymentVerifyViewController(_: Void = ()) -> NCBOnlinePaymentVerifyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbOnlinePaymentVerifyViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_popup_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_popup_close' is used in storyboard 'OnlinePayment', but couldn't be loaded.") }
        if UIKit.UIImage(named: "transaction_info_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'transaction_info_bg' is used in storyboard 'OnlinePayment', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.onlinePayment().ncbCardCompletedServiceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbCardCompletedServiceViewController' could not be loaded from storyboard 'OnlinePayment' as 'NCBCardCompletedServiceViewController'.") }
        if _R.storyboard.onlinePayment().ncbOnlinePaymentRegisterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbOnlinePaymentRegisterViewController' could not be loaded from storyboard 'OnlinePayment' as 'NCBOnlinePaymentRegisterViewController'.") }
        if _R.storyboard.onlinePayment().ncbOnlinePaymentVerifyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbOnlinePaymentVerifyViewController' could not be loaded from storyboard 'OnlinePayment' as 'NCBOnlinePaymentVerifyViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct qrTransfer: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QRTransfer"
      let ncbDetailQRTransferViewController = StoryboardViewControllerResource<NCBDetailQRTransferViewController>(identifier: "NCBDetailQRTransferViewController")
      let ncbFirstTypeQuiteTransferViewController = StoryboardViewControllerResource<NCBFirstTypeQuiteTransferViewController>(identifier: "NCBFirstTypeQuiteTransferViewController")
      let ncbHistoryQRTransferViewController = StoryboardViewControllerResource<NCBHistoryQRTransferViewController>(identifier: "NCBHistoryQRTransferViewController")
      let ncbqrCodeType1ViewController = StoryboardViewControllerResource<NCBQRCodeType1ViewController>(identifier: "NCBQRCodeType1ViewController")
      let ncbqrFirstTypeAnimatedTransferViewController = StoryboardViewControllerResource<NCBQRFirstTypeAnimatedTransferViewController>(identifier: "NCBQRFirstTypeAnimatedTransferViewController")
      
      func ncbDetailQRTransferViewController(_: Void = ()) -> NCBDetailQRTransferViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbDetailQRTransferViewController)
      }
      
      func ncbFirstTypeQuiteTransferViewController(_: Void = ()) -> NCBFirstTypeQuiteTransferViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbFirstTypeQuiteTransferViewController)
      }
      
      func ncbHistoryQRTransferViewController(_: Void = ()) -> NCBHistoryQRTransferViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbHistoryQRTransferViewController)
      }
      
      func ncbqrCodeType1ViewController(_: Void = ()) -> NCBQRCodeType1ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbqrCodeType1ViewController)
      }
      
      func ncbqrFirstTypeAnimatedTransferViewController(_: Void = ()) -> NCBQRFirstTypeAnimatedTransferViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbqrFirstTypeAnimatedTransferViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "img_scannerframe", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_scannerframe' is used in storyboard 'QRTransfer', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.qrTransfer().ncbDetailQRTransferViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbDetailQRTransferViewController' could not be loaded from storyboard 'QRTransfer' as 'NCBDetailQRTransferViewController'.") }
        if _R.storyboard.qrTransfer().ncbFirstTypeQuiteTransferViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbFirstTypeQuiteTransferViewController' could not be loaded from storyboard 'QRTransfer' as 'NCBFirstTypeQuiteTransferViewController'.") }
        if _R.storyboard.qrTransfer().ncbHistoryQRTransferViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbHistoryQRTransferViewController' could not be loaded from storyboard 'QRTransfer' as 'NCBHistoryQRTransferViewController'.") }
        if _R.storyboard.qrTransfer().ncbqrCodeType1ViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbqrCodeType1ViewController' could not be loaded from storyboard 'QRTransfer' as 'NCBQRCodeType1ViewController'.") }
        if _R.storyboard.qrTransfer().ncbqrFirstTypeAnimatedTransferViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbqrFirstTypeAnimatedTransferViewController' could not be loaded from storyboard 'QRTransfer' as 'NCBQRFirstTypeAnimatedTransferViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct receiverList: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ReceiverList"
      let ncbBeneficiariesCreateViewController = StoryboardViewControllerResource<NCBBeneficiariesCreateViewController>(identifier: "NCBBeneficiariesCreateViewController")
      let ncbBeneficiariesUpdateViewController = StoryboardViewControllerResource<NCBBeneficiariesUpdateViewController>(identifier: "NCBBeneficiariesUpdateViewController")
      let ncbReceiveListViewController = StoryboardViewControllerResource<NCBReceiverListViewController>(identifier: "NCBReceiveListViewController")
      
      func ncbBeneficiariesCreateViewController(_: Void = ()) -> NCBBeneficiariesCreateViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbBeneficiariesCreateViewController)
      }
      
      func ncbBeneficiariesUpdateViewController(_: Void = ()) -> NCBBeneficiariesUpdateViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbBeneficiariesUpdateViewController)
      }
      
      func ncbReceiveListViewController(_: Void = ()) -> NCBReceiverListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbReceiveListViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.receiverList().ncbBeneficiariesCreateViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbBeneficiariesCreateViewController' could not be loaded from storyboard 'ReceiverList' as 'NCBBeneficiariesCreateViewController'.") }
        if _R.storyboard.receiverList().ncbBeneficiariesUpdateViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbBeneficiariesUpdateViewController' could not be loaded from storyboard 'ReceiverList' as 'NCBBeneficiariesUpdateViewController'.") }
        if _R.storyboard.receiverList().ncbReceiveListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbReceiveListViewController' could not be loaded from storyboard 'ReceiverList' as 'NCBReceiverListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct registerNewAcct: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RegisterNewAcct"
      let ncbNewRegisterNormalAcctViewController = StoryboardViewControllerResource<NCBNewRegisterNormalAcctViewController>(identifier: "NCBNewRegisterNormalAcctViewController")
      let ncbNewRegisterVidAcctViewController = StoryboardViewControllerResource<NCBNewRegisterVidAcctViewController>(identifier: "NCBNewRegisterVidAcctViewController")
      let ncbRegisterNewAccountViewController = StoryboardViewControllerResource<NCBRegisterNewAccountViewController>(identifier: "NCBRegisterNewAccountViewController")
      let ncbRegisterNewAcctDetailViewController = StoryboardViewControllerResource<NCBRegisterNewAcctDetailViewController>(identifier: "NCBRegisterNewAcctDetailViewController")
      let ncbRegisterNewAcctSuccessfulViewController = StoryboardViewControllerResource<NCBRegisterNewAcctSuccessfulViewController>(identifier: "NCBRegisterNewAcctSuccessfulViewController")
      let ncbRegisterNewAcctVerifyViewController = StoryboardViewControllerResource<NCBRegisterNewAcctVerifyViewController>(identifier: "NCBRegisterNewAcctVerifyViewController")
      let ncbRegisterNormalAcctViewController = StoryboardViewControllerResource<NCBRegisterNormalAcctViewController>(identifier: "NCBRegisterNormalAcctViewController")
      let ncbRegisterVidAcctDetailViewController = StoryboardViewControllerResource<NCBRegisterVidAcctDetailViewController>(identifier: "NCBRegisterVidAcctDetailViewController")
      let ncbRegisterVidAcctViewController = StoryboardViewControllerResource<NCBRegisterVidAcctViewController>(identifier: "NCBRegisterVidAcctViewController")
      
      func ncbNewRegisterNormalAcctViewController(_: Void = ()) -> NCBNewRegisterNormalAcctViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbNewRegisterNormalAcctViewController)
      }
      
      func ncbNewRegisterVidAcctViewController(_: Void = ()) -> NCBNewRegisterVidAcctViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbNewRegisterVidAcctViewController)
      }
      
      func ncbRegisterNewAccountViewController(_: Void = ()) -> NCBRegisterNewAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegisterNewAccountViewController)
      }
      
      func ncbRegisterNewAcctDetailViewController(_: Void = ()) -> NCBRegisterNewAcctDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegisterNewAcctDetailViewController)
      }
      
      func ncbRegisterNewAcctSuccessfulViewController(_: Void = ()) -> NCBRegisterNewAcctSuccessfulViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegisterNewAcctSuccessfulViewController)
      }
      
      func ncbRegisterNewAcctVerifyViewController(_: Void = ()) -> NCBRegisterNewAcctVerifyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegisterNewAcctVerifyViewController)
      }
      
      func ncbRegisterNormalAcctViewController(_: Void = ()) -> NCBRegisterNormalAcctViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegisterNormalAcctViewController)
      }
      
      func ncbRegisterVidAcctDetailViewController(_: Void = ()) -> NCBRegisterVidAcctDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegisterVidAcctDetailViewController)
      }
      
      func ncbRegisterVidAcctViewController(_: Void = ()) -> NCBRegisterVidAcctViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegisterVidAcctViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_bottomsheet_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bottomsheet_close' is used in storyboard 'RegisterNewAcct', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_faceid_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_faceid_blue' is used in storyboard 'RegisterNewAcct', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.registerNewAcct().ncbNewRegisterNormalAcctViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbNewRegisterNormalAcctViewController' could not be loaded from storyboard 'RegisterNewAcct' as 'NCBNewRegisterNormalAcctViewController'.") }
        if _R.storyboard.registerNewAcct().ncbNewRegisterVidAcctViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbNewRegisterVidAcctViewController' could not be loaded from storyboard 'RegisterNewAcct' as 'NCBNewRegisterVidAcctViewController'.") }
        if _R.storyboard.registerNewAcct().ncbRegisterNewAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegisterNewAccountViewController' could not be loaded from storyboard 'RegisterNewAcct' as 'NCBRegisterNewAccountViewController'.") }
        if _R.storyboard.registerNewAcct().ncbRegisterNewAcctDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegisterNewAcctDetailViewController' could not be loaded from storyboard 'RegisterNewAcct' as 'NCBRegisterNewAcctDetailViewController'.") }
        if _R.storyboard.registerNewAcct().ncbRegisterNewAcctSuccessfulViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegisterNewAcctSuccessfulViewController' could not be loaded from storyboard 'RegisterNewAcct' as 'NCBRegisterNewAcctSuccessfulViewController'.") }
        if _R.storyboard.registerNewAcct().ncbRegisterNewAcctVerifyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegisterNewAcctVerifyViewController' could not be loaded from storyboard 'RegisterNewAcct' as 'NCBRegisterNewAcctVerifyViewController'.") }
        if _R.storyboard.registerNewAcct().ncbRegisterNormalAcctViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegisterNormalAcctViewController' could not be loaded from storyboard 'RegisterNewAcct' as 'NCBRegisterNormalAcctViewController'.") }
        if _R.storyboard.registerNewAcct().ncbRegisterVidAcctDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegisterVidAcctDetailViewController' could not be loaded from storyboard 'RegisterNewAcct' as 'NCBRegisterVidAcctDetailViewController'.") }
        if _R.storyboard.registerNewAcct().ncbRegisterVidAcctViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegisterVidAcctViewController' could not be loaded from storyboard 'RegisterNewAcct' as 'NCBRegisterVidAcctViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct registerNewService: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "RegisterNewService"
      let ncbOpenIZIAccountStep1ViewController = StoryboardViewControllerResource<NCBOpenIZIAccountStep1ViewController>(identifier: "NCBOpenIZIAccountStep1ViewController")
      let ncbRegisterCreditCardViewController = StoryboardViewControllerResource<NCBRegisterCreditCardViewController>(identifier: "NCBRegisterCreditCardViewController")
      let ncbRegisterForLoanViewController = StoryboardViewControllerResource<NCBRegisterForLoanViewController>(identifier: "NCBRegisterForLoanViewController")
      let ncbRegisterNewServiceViewController = StoryboardViewControllerResource<NCBRegisterNewServiceViewController>(identifier: "NCBRegisterNewServiceViewController")
      
      func ncbOpenIZIAccountStep1ViewController(_: Void = ()) -> NCBOpenIZIAccountStep1ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbOpenIZIAccountStep1ViewController)
      }
      
      func ncbRegisterCreditCardViewController(_: Void = ()) -> NCBRegisterCreditCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegisterCreditCardViewController)
      }
      
      func ncbRegisterForLoanViewController(_: Void = ()) -> NCBRegisterForLoanViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegisterForLoanViewController)
      }
      
      func ncbRegisterNewServiceViewController(_: Void = ()) -> NCBRegisterNewServiceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegisterNewServiceViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "radio_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio_uncheck' is used in storyboard 'RegisterNewService', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.registerNewService().ncbOpenIZIAccountStep1ViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbOpenIZIAccountStep1ViewController' could not be loaded from storyboard 'RegisterNewService' as 'NCBOpenIZIAccountStep1ViewController'.") }
        if _R.storyboard.registerNewService().ncbRegisterCreditCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegisterCreditCardViewController' could not be loaded from storyboard 'RegisterNewService' as 'NCBRegisterCreditCardViewController'.") }
        if _R.storyboard.registerNewService().ncbRegisterForLoanViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegisterForLoanViewController' could not be loaded from storyboard 'RegisterNewService' as 'NCBRegisterForLoanViewController'.") }
        if _R.storyboard.registerNewService().ncbRegisterNewServiceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegisterNewServiceViewController' could not be loaded from storyboard 'RegisterNewService' as 'NCBRegisterNewServiceViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct registerSMSBanking: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RegisterSMSBanking"
      let ncbRegisterSMSBankingSuccessViewController = StoryboardViewControllerResource<NCBRegisterSMSBankingSuccessViewController>(identifier: "NCBRegisterSMSBankingSuccessViewController")
      let ncbRegisterSMSBankingViewController = StoryboardViewControllerResource<NCBRegisterSMSBankingViewController>(identifier: "NCBRegisterSMSBankingViewController")
      
      func ncbRegisterSMSBankingSuccessViewController(_: Void = ()) -> NCBRegisterSMSBankingSuccessViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegisterSMSBankingSuccessViewController)
      }
      
      func ncbRegisterSMSBankingViewController(_: Void = ()) -> NCBRegisterSMSBankingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbRegisterSMSBankingViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "transaction_info_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'transaction_info_bg' is used in storyboard 'RegisterSMSBanking', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.registerSMSBanking().ncbRegisterSMSBankingSuccessViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegisterSMSBankingSuccessViewController' could not be loaded from storyboard 'RegisterSMSBanking' as 'NCBRegisterSMSBankingSuccessViewController'.") }
        if _R.storyboard.registerSMSBanking().ncbRegisterSMSBankingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbRegisterSMSBankingViewController' could not be loaded from storyboard 'RegisterSMSBanking' as 'NCBRegisterSMSBankingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct saving: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Saving"
      let ncbAddSavingAmountViewController = StoryboardViewControllerResource<NCBAddSavingAmountViewController>(identifier: "NCBAddSavingAmountViewController")
      let ncbDetailSavingFinalSettlementAccountViewController = StoryboardViewControllerResource<NCBDetailSavingFinalSettlementAccountViewController>(identifier: "NCBDetailSavingFinalSettlementAccountViewController")
      let ncbTransferInfoSFSViewController = StoryboardViewControllerResource<NCBTransferInfoSFSViewController>(identifier: "NCBTransferInfoSFSViewController")
      let ncbTransferInfoSavingViewController = StoryboardViewControllerResource<NCBTransferInfoSavingViewController>(identifier: "NCBTransferInfoSavingViewController")
      let ncbTransferSavingSuccessViewController = StoryboardViewControllerResource<NCBTransferSavingSuccessViewController>(identifier: "NCBTransferSavingSuccessViewController")
      let ncbTransferSuccessSFSViewController = StoryboardViewControllerResource<NCBTransferSuccessSFSViewController>(identifier: "NCBTransferSuccessSFSViewController")
      
      func ncbAddSavingAmountViewController(_: Void = ()) -> NCBAddSavingAmountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbAddSavingAmountViewController)
      }
      
      func ncbDetailSavingFinalSettlementAccountViewController(_: Void = ()) -> NCBDetailSavingFinalSettlementAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbDetailSavingFinalSettlementAccountViewController)
      }
      
      func ncbTransferInfoSFSViewController(_: Void = ()) -> NCBTransferInfoSFSViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbTransferInfoSFSViewController)
      }
      
      func ncbTransferInfoSavingViewController(_: Void = ()) -> NCBTransferInfoSavingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbTransferInfoSavingViewController)
      }
      
      func ncbTransferSavingSuccessViewController(_: Void = ()) -> NCBTransferSavingSuccessViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbTransferSavingSuccessViewController)
      }
      
      func ncbTransferSuccessSFSViewController(_: Void = ()) -> NCBTransferSuccessSFSViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbTransferSuccessSFSViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.saving().ncbAddSavingAmountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbAddSavingAmountViewController' could not be loaded from storyboard 'Saving' as 'NCBAddSavingAmountViewController'.") }
        if _R.storyboard.saving().ncbDetailSavingFinalSettlementAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbDetailSavingFinalSettlementAccountViewController' could not be loaded from storyboard 'Saving' as 'NCBDetailSavingFinalSettlementAccountViewController'.") }
        if _R.storyboard.saving().ncbTransferInfoSFSViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbTransferInfoSFSViewController' could not be loaded from storyboard 'Saving' as 'NCBTransferInfoSFSViewController'.") }
        if _R.storyboard.saving().ncbTransferInfoSavingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbTransferInfoSavingViewController' could not be loaded from storyboard 'Saving' as 'NCBTransferInfoSavingViewController'.") }
        if _R.storyboard.saving().ncbTransferSavingSuccessViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbTransferSavingSuccessViewController' could not be loaded from storyboard 'Saving' as 'NCBTransferSavingSuccessViewController'.") }
        if _R.storyboard.saving().ncbTransferSuccessSFSViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbTransferSuccessSFSViewController' could not be loaded from storyboard 'Saving' as 'NCBTransferSuccessSFSViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct sendSaving: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SendSaving"
      let ncbBottomSheetDetailListViewController = StoryboardViewControllerResource<NCBBottomSheetDetailListViewController>(identifier: "NCBBottomSheetDetailListViewController")
      let ncbSavingAccountSuccessfulViewController = StoryboardViewControllerResource<NCBSavingAccountSuccessfulViewController>(identifier: "NCBSavingAccountSuccessfulViewController")
      let ncbVerifySavingAccountViewController = StoryboardViewControllerResource<NCBVerifySavingAccountViewController>(identifier: "NCBVerifySavingAccountViewController")
      let ncbiSavingsViewController = StoryboardViewControllerResource<NCBISavingsViewController>(identifier: "NCBISavingsViewController")
      
      func ncbBottomSheetDetailListViewController(_: Void = ()) -> NCBBottomSheetDetailListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbBottomSheetDetailListViewController)
      }
      
      func ncbSavingAccountSuccessfulViewController(_: Void = ()) -> NCBSavingAccountSuccessfulViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbSavingAccountSuccessfulViewController)
      }
      
      func ncbVerifySavingAccountViewController(_: Void = ()) -> NCBVerifySavingAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbVerifySavingAccountViewController)
      }
      
      func ncbiSavingsViewController(_: Void = ()) -> NCBISavingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbiSavingsViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.sendSaving().ncbBottomSheetDetailListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbBottomSheetDetailListViewController' could not be loaded from storyboard 'SendSaving' as 'NCBBottomSheetDetailListViewController'.") }
        if _R.storyboard.sendSaving().ncbiSavingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbiSavingsViewController' could not be loaded from storyboard 'SendSaving' as 'NCBISavingsViewController'.") }
        if _R.storyboard.sendSaving().ncbSavingAccountSuccessfulViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbSavingAccountSuccessfulViewController' could not be loaded from storyboard 'SendSaving' as 'NCBSavingAccountSuccessfulViewController'.") }
        if _R.storyboard.sendSaving().ncbVerifySavingAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbVerifySavingAccountViewController' could not be loaded from storyboard 'SendSaving' as 'NCBVerifySavingAccountViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct servicePayment: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ServicePayment"
      let ncbAutoPaymentDetailViewController = StoryboardViewControllerResource<NCBAutoPaymentDetailViewController>(identifier: "NCBAutoPaymentDetailViewController")
      let ncbAutoPaymentListViewController = StoryboardViewControllerResource<NCBAutoPaymentListViewController>(identifier: "NCBAutoPaymentListViewController")
      let ncbAutoPaymentRegisterViewController = StoryboardViewControllerResource<NCBAutoPaymentRegisterViewController>(identifier: "NCBAutoPaymentRegisterViewController")
      let ncbPayBillSavedListViewController = StoryboardViewControllerResource<NCBPayBillSavedListViewController>(identifier: "NCBPayBillSavedListViewController")
      let ncbProviderListViewController = StoryboardViewControllerResource<NCBProviderListViewController>(identifier: "NCBProviderListViewController")
      let ncbServiceListViewController = StoryboardViewControllerResource<NCBServiceListViewController>(identifier: "NCBServiceListViewController")
      let ncbServicePaymentCompletedViewController = StoryboardViewControllerResource<NCBServicePaymentCompletedViewController>(identifier: "NCBServicePaymentCompletedViewController")
      let ncbServicePaymentViewController = StoryboardViewControllerResource<NCBServicePaymentViewController>(identifier: "NCBServicePaymentViewController")
      let ncbVerifyServicePaymentViewController = StoryboardViewControllerResource<NCBVerifyServicePaymentViewController>(identifier: "NCBVerifyServicePaymentViewController")
      
      func ncbAutoPaymentDetailViewController(_: Void = ()) -> NCBAutoPaymentDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbAutoPaymentDetailViewController)
      }
      
      func ncbAutoPaymentListViewController(_: Void = ()) -> NCBAutoPaymentListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbAutoPaymentListViewController)
      }
      
      func ncbAutoPaymentRegisterViewController(_: Void = ()) -> NCBAutoPaymentRegisterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbAutoPaymentRegisterViewController)
      }
      
      func ncbPayBillSavedListViewController(_: Void = ()) -> NCBPayBillSavedListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbPayBillSavedListViewController)
      }
      
      func ncbProviderListViewController(_: Void = ()) -> NCBProviderListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbProviderListViewController)
      }
      
      func ncbServiceListViewController(_: Void = ()) -> NCBServiceListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbServiceListViewController)
      }
      
      func ncbServicePaymentCompletedViewController(_: Void = ()) -> NCBServicePaymentCompletedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbServicePaymentCompletedViewController)
      }
      
      func ncbServicePaymentViewController(_: Void = ()) -> NCBServicePaymentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbServicePaymentViewController)
      }
      
      func ncbVerifyServicePaymentViewController(_: Void = ()) -> NCBVerifyServicePaymentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbVerifyServicePaymentViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.servicePayment().ncbAutoPaymentDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbAutoPaymentDetailViewController' could not be loaded from storyboard 'ServicePayment' as 'NCBAutoPaymentDetailViewController'.") }
        if _R.storyboard.servicePayment().ncbAutoPaymentListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbAutoPaymentListViewController' could not be loaded from storyboard 'ServicePayment' as 'NCBAutoPaymentListViewController'.") }
        if _R.storyboard.servicePayment().ncbAutoPaymentRegisterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbAutoPaymentRegisterViewController' could not be loaded from storyboard 'ServicePayment' as 'NCBAutoPaymentRegisterViewController'.") }
        if _R.storyboard.servicePayment().ncbPayBillSavedListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbPayBillSavedListViewController' could not be loaded from storyboard 'ServicePayment' as 'NCBPayBillSavedListViewController'.") }
        if _R.storyboard.servicePayment().ncbProviderListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbProviderListViewController' could not be loaded from storyboard 'ServicePayment' as 'NCBProviderListViewController'.") }
        if _R.storyboard.servicePayment().ncbServiceListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbServiceListViewController' could not be loaded from storyboard 'ServicePayment' as 'NCBServiceListViewController'.") }
        if _R.storyboard.servicePayment().ncbServicePaymentCompletedViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbServicePaymentCompletedViewController' could not be loaded from storyboard 'ServicePayment' as 'NCBServicePaymentCompletedViewController'.") }
        if _R.storyboard.servicePayment().ncbServicePaymentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbServicePaymentViewController' could not be loaded from storyboard 'ServicePayment' as 'NCBServicePaymentViewController'.") }
        if _R.storyboard.servicePayment().ncbVerifyServicePaymentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbVerifyServicePaymentViewController' could not be loaded from storyboard 'ServicePayment' as 'NCBVerifyServicePaymentViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct setting: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Setting"
      let ncbEnterPasswordViewController = StoryboardViewControllerResource<NCBEnterPasswordViewController>(identifier: "NCBEnterPasswordViewController")
      let ncbSettingsChangePasswordViewController = StoryboardViewControllerResource<NCBSettingsChangePasswordViewController>(identifier: "NCBSettingsChangePasswordViewController")
      let ncbSettingsViewController = StoryboardViewControllerResource<NCBSettingsViewController>(identifier: "NCBSettingsViewController")
      
      func ncbEnterPasswordViewController(_: Void = ()) -> NCBEnterPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbEnterPasswordViewController)
      }
      
      func ncbSettingsChangePasswordViewController(_: Void = ()) -> NCBSettingsChangePasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbSettingsChangePasswordViewController)
      }
      
      func ncbSettingsViewController(_: Void = ()) -> NCBSettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbSettingsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_popup_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_popup_close' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_setting_change_otp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_setting_change_otp' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_setting_change_pass", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_setting_change_pass' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_setting_login_toucid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_setting_login_toucid' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_setting_resend_otp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_setting_resend_otp' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_setting_transaction_toucid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_setting_transaction_toucid' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unsave_beneficiary_btn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unsave_beneficiary_btn' is used in storyboard 'Setting', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.setting().ncbEnterPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbEnterPasswordViewController' could not be loaded from storyboard 'Setting' as 'NCBEnterPasswordViewController'.") }
        if _R.storyboard.setting().ncbSettingsChangePasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbSettingsChangePasswordViewController' could not be loaded from storyboard 'Setting' as 'NCBSettingsChangePasswordViewController'.") }
        if _R.storyboard.setting().ncbSettingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbSettingsViewController' could not be loaded from storyboard 'Setting' as 'NCBSettingsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct splash: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NCBSplashScreenViewController
      
      let bundle = R.hostingBundle
      let name = "Splash"
      let ncbActiveServiceViewController = StoryboardViewControllerResource<NCBActiveServiceViewController>(identifier: "NCBActiveServiceViewController")
      let ncbSplashScreenViewController = StoryboardViewControllerResource<NCBSplashScreenViewController>(identifier: "NCBSplashScreenViewController")
      
      func ncbActiveServiceViewController(_: Void = ()) -> NCBActiveServiceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbActiveServiceViewController)
      }
      
      func ncbSplashScreenViewController(_: Void = ()) -> NCBSplashScreenViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbSplashScreenViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splash_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash_bg' is used in storyboard 'Splash', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.splash().ncbActiveServiceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbActiveServiceViewController' could not be loaded from storyboard 'Splash' as 'NCBActiveServiceViewController'.") }
        if _R.storyboard.splash().ncbSplashScreenViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbSplashScreenViewController' could not be loaded from storyboard 'Splash' as 'NCBSplashScreenViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct transaction: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Transaction"
      let ncbTransactionCompletedViewController = StoryboardViewControllerResource<NCBTransactionCompletedViewController>(identifier: "NCBTransactionCompletedViewController")
      let ncbTransactionInformationViewController = StoryboardViewControllerResource<NCBTransactionInformationViewController>(identifier: "NCBTransactionInformationViewController")
      let ncbVerifyTransactionViewController = StoryboardViewControllerResource<NCBVerifyTransactionViewController>(identifier: "NCBVerifyTransactionViewController")
      
      func ncbTransactionCompletedViewController(_: Void = ()) -> NCBTransactionCompletedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbTransactionCompletedViewController)
      }
      
      func ncbTransactionInformationViewController(_: Void = ()) -> NCBTransactionInformationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbTransactionInformationViewController)
      }
      
      func ncbVerifyTransactionViewController(_: Void = ()) -> NCBVerifyTransactionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbVerifyTransactionViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.transaction().ncbTransactionCompletedViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbTransactionCompletedViewController' could not be loaded from storyboard 'Transaction' as 'NCBTransactionCompletedViewController'.") }
        if _R.storyboard.transaction().ncbTransactionInformationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbTransactionInformationViewController' could not be loaded from storyboard 'Transaction' as 'NCBTransactionInformationViewController'.") }
        if _R.storyboard.transaction().ncbVerifyTransactionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbVerifyTransactionViewController' could not be loaded from storyboard 'Transaction' as 'NCBVerifyTransactionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct transfer: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Transfer"
      let ncbBankListViewController = StoryboardViewControllerResource<NCBBankListViewController>(identifier: "NCBBankListViewController")
      let ncbBeneficiaryListViewController = StoryboardViewControllerResource<NCBBeneficiaryListViewController>(identifier: "NCBBeneficiaryListViewController")
      let ncbCharityOrganizationListViewController = StoryboardViewControllerResource<NCBCharityOrganizationListViewController>(identifier: "NCBCharityOrganizationListViewController")
      let ncbCharityTransferViewController = StoryboardViewControllerResource<NCBCharityTransferViewController>(identifier: "NCBCharityTransferViewController")
      let ncbInterbankTransferChildViewController = StoryboardViewControllerResource<NCBInterbankTransferChildViewController>(identifier: "NCBInterbankTransferChildViewController")
      let ncbInterbankTransferViewController = StoryboardViewControllerResource<NCBInterbankTransferViewController>(identifier: "NCBInterbankTransferViewController")
      let ncbInternalTransferViewController = StoryboardViewControllerResource<NCBInternalTransferViewController>(identifier: "NCBInternalTransferViewController")
      
      func ncbBankListViewController(_: Void = ()) -> NCBBankListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbBankListViewController)
      }
      
      func ncbBeneficiaryListViewController(_: Void = ()) -> NCBBeneficiaryListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbBeneficiaryListViewController)
      }
      
      func ncbCharityOrganizationListViewController(_: Void = ()) -> NCBCharityOrganizationListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbCharityOrganizationListViewController)
      }
      
      func ncbCharityTransferViewController(_: Void = ()) -> NCBCharityTransferViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbCharityTransferViewController)
      }
      
      func ncbInterbankTransferChildViewController(_: Void = ()) -> NCBInterbankTransferChildViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbInterbankTransferChildViewController)
      }
      
      func ncbInterbankTransferViewController(_: Void = ()) -> NCBInterbankTransferViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbInterbankTransferViewController)
      }
      
      func ncbInternalTransferViewController(_: Void = ()) -> NCBInternalTransferViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ncbInternalTransferViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_radio_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_uncheck' is used in storyboard 'Transfer', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.transfer().ncbBankListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbBankListViewController' could not be loaded from storyboard 'Transfer' as 'NCBBankListViewController'.") }
        if _R.storyboard.transfer().ncbBeneficiaryListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbBeneficiaryListViewController' could not be loaded from storyboard 'Transfer' as 'NCBBeneficiaryListViewController'.") }
        if _R.storyboard.transfer().ncbCharityOrganizationListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbCharityOrganizationListViewController' could not be loaded from storyboard 'Transfer' as 'NCBCharityOrganizationListViewController'.") }
        if _R.storyboard.transfer().ncbCharityTransferViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbCharityTransferViewController' could not be loaded from storyboard 'Transfer' as 'NCBCharityTransferViewController'.") }
        if _R.storyboard.transfer().ncbInterbankTransferChildViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbInterbankTransferChildViewController' could not be loaded from storyboard 'Transfer' as 'NCBInterbankTransferChildViewController'.") }
        if _R.storyboard.transfer().ncbInterbankTransferViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbInterbankTransferViewController' could not be loaded from storyboard 'Transfer' as 'NCBInterbankTransferViewController'.") }
        if _R.storyboard.transfer().ncbInternalTransferViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ncbInternalTransferViewController' could not be loaded from storyboard 'Transfer' as 'NCBInternalTransferViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
